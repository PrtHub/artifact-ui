{
  "name": "three-d-card",
  "type": "registry:ui",
  "dependencies": [
    "@/lib/utils"
  ],
  "files": [
    {
      "path": "ui/three-d-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport Image from \"next/image\";\n\nexport interface ThreeDCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  title?: string;\n  imageUrl?: string;\n  backgroundUrl?: string;\n  className?: string;\n  children?: React.ReactNode;\n  variant?: \"default\" | \"shine\" | \"border\";\n  disabled?: boolean;\n}\n\nexport default function ThreeDCard({\n  title,\n  imageUrl,\n  backgroundUrl,\n  className,\n  children,\n  variant = \"default\",\n  disabled = false,\n  ...props\n}: ThreeDCardProps) {\n  const cardRef = React.useRef<HTMLDivElement>(null);\n  const [rotation, setRotation] = React.useState({ x: 0, y: 0 });\n  const [position, setPosition] = React.useState({ x: 0, y: 0 });\n  const [isHovered, setIsHovered] = React.useState(false);\n  const [isInitialRender, setIsInitialRender] = React.useState(true);\n\n  React.useEffect(() => {\n    // Remove initial render flag after mount\n    setIsInitialRender(false);\n  }, []);\n\n  const handleMouseMove = React.useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!cardRef.current || disabled) return;\n\n      const rect = cardRef.current.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.top + rect.height / 2;\n      const mouseX = e.clientX - centerX;\n      const mouseY = e.clientY - centerY;\n\n      // Calculate rotation with smoother values\n      const rotateY = (mouseX / (rect.width / 2)) * 25;\n      const rotateX = -(mouseY / (rect.height / 2)) * 25;\n\n      // Calculate position with smoother values\n      const moveX = (mouseX / rect.width) * 10;\n      const moveY = (mouseY / rect.height) * 10;\n\n      // Use requestAnimationFrame for smoother updates\n      requestAnimationFrame(() => {\n        setRotation({ x: rotateX, y: rotateY });\n        setPosition({ x: moveX, y: moveY });\n      });\n    },\n    [disabled],\n  );\n\n  const handleMouseLeave = React.useCallback(() => {\n    if (disabled) return;\n    requestAnimationFrame(() => {\n      setRotation({ x: 0, y: 0 });\n      setPosition({ x: 0, y: 0 });\n      setIsHovered(false);\n    });\n  }, [disabled]);\n\n  const handleMouseEnter = React.useCallback(() => {\n    if (disabled) return;\n    setIsHovered(true);\n  }, [disabled]);\n\n  const transitionSettings = isInitialRender\n    ? \"none\"\n    : isHovered\n      ? \"transform 0.1s ease-out\"\n      : \"transform 0.5s ease-out\";\n\n  const cardStyle = {\n    transform: `\n      perspective(2000px)\n      rotateX(${disabled ? 0 : rotation.x}deg)\n      rotateY(${disabled ? 0 : rotation.y}deg)\n      scale(${isHovered && !disabled ? 1.05 : 1})\n      ${disabled ? \"translateZ(0)\" : \"\"}\n    `,\n    transformStyle: \"preserve-3d\" as const,\n    transition: transitionSettings,\n    transformOrigin: \"center center\",\n    filter: disabled ? \"grayscale(1) brightness(0.8)\" : \"none\",\n    willChange: \"transform\",\n  };\n\n  return (\n    <div\n      ref={cardRef}\n      className={cn(\n        \"group relative h-[250px] w-[175px] cursor-pointer overflow-hidden rounded-xl\",\n        \"transform-gpu shadow-2xl\",\n        // Border variant\n        variant === \"border\" && [\n          \"before:absolute before:inset-0 before:z-20 before:rounded-xl before:border-2\",\n          \"before:border-white/20 before:transition-colors before:duration-700\",\n          \"hover:before:border-white/40\",\n        ],\n        // Shine variant\n        variant === \"shine\" && [\n          \"after:absolute after:inset-0 after:z-20\",\n          \"after:bg-gradient-to-br after:from-white/0 after:to-white/20\",\n          \"after:transition-opacity after:duration-700\",\n          \"hover:after:opacity-100\",\n        ],\n        disabled && \"cursor-not-allowed\",\n        className,\n      )}\n      style={cardStyle}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={handleMouseLeave}\n      onMouseEnter={handleMouseEnter}\n      {...props}\n    >\n      {/* Background Image with Parallax */}\n      {backgroundUrl && (\n        <div\n          className={cn(\n            \"absolute inset-0 scale-110 bg-cover bg-center\",\n            disabled && \"brightness-75 grayscale\",\n          )}\n          style={{\n            backgroundImage: `url(${backgroundUrl})`,\n            transform: `\n              translateZ(-75px)\n              translateX(${position.x * 2}px)\n              translateY(${position.y * 2}px)\n              scale(${isHovered && !disabled ? 1.15 : 1.1})\n            `,\n            transition: transitionSettings,\n            willChange: \"transform\",\n          }}\n        />\n      )}\n\n      {/* Glare Effect */}\n      {!disabled && (\n        <div\n          className=\"pointer-events-none absolute inset-0 h-full w-full\"\n          style={{\n            background: `linear-gradient(\n              ${105 + rotation.x}deg,\n              transparent 20%,\n              rgba(255, 255, 255, ${isHovered ? 0.1 : 0}) 35%,\n              rgba(255, 255, 255, ${isHovered ? 0.2 : 0}) 50%,\n              transparent 80%\n            )`,\n            transform: \"translateZ(1px)\",\n            opacity: isHovered ? 1 : 0,\n            transition: \"opacity 0.5s ease-out\",\n          }}\n        />\n      )}\n\n      {/* Main Image with Enhanced Parallax */}\n      {imageUrl && (\n        <div className=\"relative h-full w-full\">\n          <Image\n            src={imageUrl}\n            alt={title || \"Card image\"}\n            fill\n            className={cn(\n              \"relative z-10 object-contain drop-shadow-2xl\",\n              disabled && \"brightness-75 grayscale\",\n              isHovered &&\n                !disabled &&\n                \"drop-shadow-[0_20px_30px_rgba(0,0,0,0.3)]\",\n            )}\n            style={{\n              transform: `\n                translateZ(${isHovered ? 120 : 75}px)\n                translateX(${position.x * -2}px)\n                translateY(${position.y * -2}px)\n                scale(${isHovered && !disabled ? 1.2 : 1.1})\n              `,\n              transition: transitionSettings,\n              willChange: \"transform\",\n            }}\n          />\n        </div>\n      )}\n\n      {/* Text Content with Parallax */}\n      <div\n        className=\"absolute -bottom-3 z-20 w-full rounded-b-xl bg-gradient-to-t from-black/90 via-black/50 to-transparent p-4\"\n        style={{\n          transform: `\n            translateZ(50px)\n            translateX(${position.x * -1.5}px)\n            translateY(${position.y * -1.5}px)\n          `,\n          transition: transitionSettings,\n          willChange: \"transform\",\n        }}\n      >\n        {title && (\n          <h3\n            className={cn(\n              \"text-lg font-bold text-white\",\n              disabled && \"text-white/70\",\n            )}\n            style={{\n              textShadow: \"2px 2px 4px rgba(0,0,0,0.5)\",\n              transform: `translateZ(25px)`,\n              transition: transitionSettings,\n            }}\n          >\n            {title}\n          </h3>\n        )}\n        {children}\n      </div>\n\n      {/* Hover ring effect */}\n      <div\n        className={cn(\n          \"absolute inset-0 rounded-xl ring-2 ring-white/0\",\n          isHovered && !disabled && \"ring-white/20\",\n        )}\n        style={{\n          transform: \"translateZ(100px)\",\n          transition: \"ring-color 0.5s ease-out\",\n        }}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}