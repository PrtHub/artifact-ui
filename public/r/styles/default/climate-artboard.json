{
  "name": "climate-artboard",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "xanthic/climate-artboard.tsx",
      "content": "import React, { useEffect, useState, useCallback, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useTheme } from \"next-themes\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface WeatherData {\n  condition: \"sunny\" | \"rainy\" | \"cloudy\" | \"snowy\";\n  temperature: number;\n  humidity: number;\n  windSpeed: number;\n  location?: string;\n  time?: string;\n  forecast?: Array<{\n    condition: \"sunny\" | \"rainy\" | \"cloudy\" | \"snowy\";\n    temperature: number;\n    time: string;\n  }>;\n}\n\ninterface ClimateArtboardProps {\n  className?: string;\n  title?: string;\n  subtitle?: string;\n  showDetails?: boolean;\n  autoAnimate?: boolean;\n  theme?: \"light\" | \"dark\" | \"glass\";\n  apiKey?: string;\n  onWeatherChange?: (weather: WeatherData) => void;\n}\n\ninterface ParticleConfig {\n  count: number;\n  velocity: number;\n  size: number;\n  opacity: number;\n  color: string;\n  drift?: number;\n}\n\nconst weatherIcons = {\n  sunny: (\n    <motion.svg\n      key=\"sun\"\n      className=\"h-16 w-16\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      initial={{ rotate: 0 }}\n      animate={{ rotate: 360 }}\n      transition={{ duration: 20, repeat: Infinity, ease: \"linear\" }}\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"5\" fill=\"currentColor\" />\n      {[0, 45, 90, 135, 180, 225, 270, 315].map((angle) => (\n        <motion.line\n          key={angle}\n          x1=\"12\"\n          y1=\"4\"\n          x2=\"12\"\n          y2=\"2\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          initial={{ rotate: angle, originX: \"12\", originY: \"12\" }}\n          animate={{ scale: [1, 1.2, 1] }}\n          transition={{ duration: 2, repeat: Infinity, delay: angle / 360 }}\n          transform={`rotate(${angle} 12 12)`}\n        />\n      ))}\n    </motion.svg>\n  ),\n  rainy: (\n    <motion.svg\n      key=\"rain\"\n      className=\"h-16 w-16\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      initial={{ y: -5 }}\n      animate={{ y: 0 }}\n      transition={{ duration: 2, repeat: Infinity, ease: \"easeInOut\" }}\n    >\n      <path\n        d=\"M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n      />\n      {[4, 10, 16].map((x, i) => (\n        <motion.path\n          key={i}\n          d={`M${x} 15v3`}\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          initial={{ y: -5, opacity: 0 }}\n          animate={{ y: 5, opacity: 1 }}\n          transition={{\n            duration: 1,\n            repeat: Infinity,\n            delay: i * 0.3,\n            ease: \"linear\",\n          }}\n        />\n      ))}\n    </motion.svg>\n  ),\n  cloudy: (\n    <motion.svg\n      key=\"cloud\"\n      className=\"h-16 w-16\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      initial={{ x: -5 }}\n      animate={{ x: 5 }}\n      transition={{\n        duration: 3,\n        repeat: Infinity,\n        repeatType: \"reverse\",\n        ease: \"easeInOut\",\n      }}\n    >\n      <motion.path\n        d=\"M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        initial={{ pathLength: 0 }}\n        animate={{ pathLength: 1 }}\n        transition={{ duration: 2, ease: \"easeInOut\" }}\n      />\n    </motion.svg>\n  ),\n  snowy: (\n    <motion.svg\n      key=\"snow\"\n      className=\"h-16 w-16\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      initial={{ rotate: 0 }}\n      animate={{ rotate: 360 }}\n      transition={{ duration: 20, repeat: Infinity, ease: \"linear\" }}\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"8\" stroke=\"currentColor\" strokeWidth=\"2\" />\n      {[0, 60, 120, 180, 240, 300].map((angle, i) => (\n        <motion.circle\n          key={i}\n          cx=\"12\"\n          cy=\"7\"\n          r=\"1\"\n          fill=\"currentColor\"\n          initial={{ scale: 0 }}\n          animate={{ scale: [0, 1, 0] }}\n          transition={{\n            duration: 2,\n            repeat: Infinity,\n            delay: i * 0.3,\n            ease: \"easeInOut\",\n          }}\n          transform={`rotate(${angle} 12 12)`}\n        />\n      ))}\n    </motion.svg>\n  ),\n};\n\nconst particleConfigs: Record<\"rainy\" | \"snowy\", ParticleConfig> = {\n  rainy: {\n    count: 150,\n    velocity: 15,\n    size: 2,\n    opacity: 0.4,\n    color: \"#a3c5f7\",\n    drift: 0,\n  },\n  snowy: {\n    count: 80,\n    velocity: 3,\n    size: 4,\n    opacity: 0.8,\n    color: \"#ffffff\",\n    drift: 2,\n  },\n};\n\nexport default function ClimateArtboard({\n  className,\n  title = \"Weather\",\n  subtitle = \"Dynamic content that responds to local weather\",\n  showDetails = true,\n  autoAnimate = true,\n  theme = \"glass\",\n  apiKey,\n  onWeatherChange,\n}: ClimateArtboardProps) {\n  const [weather, setWeather] = useState<WeatherData>({\n    condition: \"sunny\",\n    temperature: 25,\n    humidity: 65,\n    windSpeed: 12,\n    location: \"Loading...\",\n    time: new Date().toLocaleTimeString(),\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [particles, setParticles] = useState<\n    Array<{\n      x: number;\n      y: number;\n      velocity: number;\n      drift: number;\n      size: number;\n      opacity: number;\n    }>\n  >([]);\n  const { theme: systemTheme } = useTheme();\n  const [isAnimating, setIsAnimating] = useState(autoAnimate);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const [lastMousePosition, setLastMousePosition] = useState({ x: 0, y: 0 });\n  const [isHovering, setIsHovering] = useState(false);\n  const mouseSpeedRef = useRef(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Mouse movement handler with speed calculation\n  const handleMouseMove = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!containerRef.current) return;\n      const rect = containerRef.current.getBoundingClientRect();\n      const x = ((e.clientX - rect.left) / rect.width) * 2 - 1;\n      const y = ((e.clientY - rect.top) / rect.height) * 2 - 1;\n\n      // Calculate mouse speed\n      const dx = x - lastMousePosition.x;\n      const dy = y - lastMousePosition.y;\n      mouseSpeedRef.current = Math.sqrt(dx * dx + dy * dy);\n\n      setLastMousePosition({ x, y });\n      setMousePosition({ x, y });\n    },\n    [lastMousePosition],\n  );\n\n  // Geolocation and Weather Data Fetching\n  const fetchWeatherData = useCallback(\n    async (lat: number, lon: number) => {\n      if (!apiKey) {\n        // Fallback to mock data if no API key\n        return {\n          condition: \"snowy\" as const,\n          temperature: 25,\n          humidity: 65,\n          windSpeed: 12,\n          location: \"New York, NY\",\n          time: new Date().toLocaleTimeString(),\n          forecast: [\n            { condition: \"sunny\", temperature: 26, time: \"14:00\" },\n            { condition: \"cloudy\", temperature: 24, time: \"17:00\" },\n            { condition: \"rainy\", temperature: 22, time: \"20:00\" },\n            { condition: \"snowy\", temperature: 20, time: \"23:00\" },\n          ],\n        };\n      }\n\n      try {\n        const response = await fetch(\n          `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${lat},${lon}&days=1`,\n        );\n        const data = await response.json();\n\n        if (!response.ok)\n          throw new Error(\n            data.error?.message || \"Failed to fetch weather data\",\n          );\n\n        return {\n          condition: mapWeatherCondition(data.current.condition.code),\n          temperature: data.current.temp_c,\n          humidity: data.current.humidity,\n          windSpeed: data.current.wind_kph,\n          location: data.location.name,\n          time: new Date().toLocaleTimeString(),\n          forecast: data.forecast.forecastday[0].hour\n            .filter((_: any, i: number) => i % 3 === 0)\n            .map((hour: any) => ({\n              condition: mapWeatherCondition(hour.condition.code),\n              temperature: hour.temp_c,\n              time: new Date(hour.time).toLocaleTimeString([], {\n                hour: \"2-digit\",\n                minute: \"2-digit\",\n              }),\n            })),\n        };\n      } catch (err) {\n        console.error(\"Weather fetch error:\", err);\n        throw err;\n      }\n    },\n    [apiKey],\n  );\n\n  const getLocation = useCallback(() => {\n    return new Promise<GeolocationPosition>((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error(\"Geolocation is not supported\"));\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(resolve, reject, {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0,\n      });\n    });\n  }, []);\n\n  // Initialize weather data and geolocation\n  useEffect(() => {\n    const initWeather = async () => {\n      try {\n        setLoading(true);\n        const position = await getLocation();\n        const weatherData = await fetchWeatherData(\n          position.coords.latitude,\n          position.coords.longitude,\n        );\n        setWeather(weatherData);\n        onWeatherChange?.(weatherData);\n        setError(null);\n      } catch (err) {\n        setError(\n          err instanceof Error ? err.message : \"Failed to load weather data\",\n        );\n        console.error(\"Weather initialization error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initWeather();\n\n    // Update time every minute\n    const timeInterval = setInterval(() => {\n      setWeather((prev) => ({\n        ...prev,\n        time: new Date().toLocaleTimeString(),\n      }));\n    }, 1000);\n\n    return () => clearInterval(timeInterval);\n  }, [fetchWeatherData, getLocation, onWeatherChange]);\n\n  // Particle system animation\n  useEffect(() => {\n    if (\n      !canvasRef.current ||\n      !isAnimating ||\n      ![\"rainy\", \"snowy\"].includes(weather.condition)\n    ) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const config = particleConfigs[weather.condition as \"rainy\" | \"snowy\"];\n    let animationFrame: number;\n\n    // Resize handler\n    const handleResize = () => {\n      canvas.width = canvas.offsetWidth;\n      canvas.height = canvas.offsetHeight;\n    };\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n\n    const initParticles = () => {\n      const newParticles = Array.from({ length: config.count }, () => ({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        velocity: Math.random() * config.velocity + config.velocity / 2,\n        drift:\n          weather.condition === \"snowy\"\n            ? Math.sin(Math.random() * Math.PI * 2) * (config.drift ?? 0)\n            : 0,\n        size:\n          weather.condition === \"snowy\"\n            ? Math.random() * 2 + config.size\n            : config.size,\n        opacity: Math.random() * 0.5 + config.opacity,\n      }));\n      setParticles(newParticles);\n    };\n\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      particles.forEach((particle) => {\n        if (weather.condition === \"rainy\") {\n          // Rain drop effect\n          ctx.beginPath();\n          ctx.strokeStyle = `rgba(163, 197, 247, ${particle.opacity})`;\n          ctx.lineWidth = 1;\n          ctx.moveTo(particle.x, particle.y);\n          ctx.lineTo(particle.x + 1, particle.y + particle.velocity / 2);\n          ctx.stroke();\n        } else {\n          // Snow flake effect\n          ctx.beginPath();\n          ctx.fillStyle = `rgba(255, 255, 255, ${particle.opacity})`;\n          ctx.arc(\n            particle.x + Math.sin(particle.y / 30) * (particle.drift || 0),\n            particle.y,\n            particle.size / 2,\n            0,\n            Math.PI * 2,\n          );\n          ctx.fill();\n        }\n      });\n\n      setParticles((prevParticles) =>\n        prevParticles.map((particle) => ({\n          ...particle,\n          y: (particle.y + particle.velocity) % canvas.height,\n          x:\n            weather.condition === \"snowy\"\n              ? (particle.x +\n                Math.sin(particle.y / 30) * (particle.drift || 0) +\n                canvas.width) %\n              canvas.width\n              : particle.x,\n        })),\n      );\n\n      animationFrame = requestAnimationFrame(animate);\n    };\n\n    initParticles();\n    animate();\n\n    return () => {\n      cancelAnimationFrame(animationFrame);\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [weather.condition, isAnimating, particles]);\n\n  const getWeatherBackground = useCallback(() => {\n    const isDark = systemTheme === \"dark\";\n    const timeOfDay = new Date().getHours();\n    const isNight = timeOfDay < 6 || timeOfDay > 18;\n\n    switch (weather.condition) {\n      case \"sunny\":\n        return isNight\n          ? \"bg-[conic-gradient(at_top,_var(--tw-gradient-stops))] from-indigo-950 via-purple-900 to-blue-950 after:absolute after:inset-0 after:bg-[radial-gradient(circle_at_top,rgba(255,255,255,0.03),transparent_50%)]\"\n          : \"bg-[radial-gradient(ellipse_at_top,_var(--tw-gradient-stops))] from-amber-300 via-orange-100 to-sky-300 after:absolute after:inset-0 after:bg-[radial-gradient(circle_at_top,rgba(255,255,255,0.2),transparent_70%)]\";\n      case \"rainy\":\n        return isDark\n          ? \"bg-[conic-gradient(at_bottom,_var(--tw-gradient-stops))] from-slate-950 via-blue-900 to-slate-900 after:absolute after:inset-0 after:bg-[linear-gradient(0deg,rgba(0,0,0,0.3),transparent_70%)] after:opacity-75\"\n          : \"bg-[linear-gradient(to_left,_var(--tw-gradient-stops))] from-slate-500 via-blue-600 to-slate-700 after:absolute after:inset-0 after:bg-[linear-gradient(180deg,rgba(255,255,255,0.1),transparent_50%)]\";\n      case \"cloudy\":\n        return isDark\n          ? \"bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-slate-800 via-zinc-900 to-slate-950 after:absolute after:inset-0 after:bg-[radial-gradient(ellipse_at_top,rgba(255,255,255,0.03),transparent_70%)]\"\n          : \"bg-[linear-gradient(to_right,_var(--tw-gradient-stops))] from-gray-300 via-slate-400 to-zinc-400 after:absolute after:inset-0 after:bg-[linear-gradient(180deg,rgba(255,255,255,0.15),transparent_60%)]\";\n      case \"snowy\":\n        return isDark\n          ? \"bg-[radial-gradient(ellipse_at_top_right,_var(--tw-gradient-stops))] from-slate-900 via-blue-950 to-slate-900 after:absolute after:inset-0 after:bg-[radial-gradient(circle_at_top,rgba(255,255,255,0.07),transparent_60%)]\"\n          : \"bg-[radial-gradient(ellipse_at_top,_var(--tw-gradient-stops))] from-white via-blue-50 to-slate-200 after:absolute after:inset-0 after:bg-[radial-gradient(circle_at_top,rgba(255,255,255,0.3),transparent_80%)]\";\n      default:\n        return \"bg-gradient-to-br from-blue-200 to-blue-400\";\n    }\n  }, [weather.condition, systemTheme]);\n\n  const getThemeStyles = () => {\n    switch (theme) {\n      case \"light\":\n        return \"bg-white/80 text-gray-800 shadow-lg backdrop-blur-md\";\n      case \"dark\":\n        return \"bg-gray-900/80 text-white shadow-lg backdrop-blur-md\";\n      case \"glass\":\n      default:\n        return \"bg-white/10 shadow-lg backdrop-blur-md text-white border border-white/20 hover:bg-white/20 transition-colors\";\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex h-full flex-col items-center justify-center\">\n        <Loader2 className=\"mx-auto mb-4 animate-spin\" />\n        <p className=\"text-gray-500\">Loading weather data...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div\n        className={cn(\n          \"relative min-h-[400px] w-full rounded-lg bg-red-50\",\n          className,\n        )}\n      >\n        <div className=\"flex h-full flex-col items-center justify-center p-4 text-center\">\n          <span className=\"mb-2 text-3xl\">⚠️</span>\n          <h3 className=\"mb-2 text-lg font-semibold text-red-800\">\n            Unable to load weather data\n          </h3>\n          <p className=\"text-sm text-red-600\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <motion.div\n      ref={containerRef}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6 }}\n      onMouseMove={handleMouseMove}\n      onMouseEnter={() => setIsHovering(true)}\n      onMouseLeave={() => setIsHovering(false)}\n      className={cn(\n        \"relative min-h-[400px] w-full overflow-hidden rounded-2xl shadow-2xl transition-all duration-1000\",\n        \"before:absolute before:inset-0 before:z-0\",\n        \"after:z-0\",\n        getWeatherBackground(),\n        className,\n      )}\n    >\n      <div className=\"absolute inset-0 bg-gradient-to-b from-black/10 via-transparent to-black/30\" />\n      <motion.div\n        className=\"absolute inset-0 bg-[url('/noise.png')] opacity-[0.02] mix-blend-overlay\"\n        animate={{\n          backgroundPosition: [\"0% 0%\", \"100% 100%\"],\n        }}\n        transition={{\n          duration: 20,\n          ease: \"linear\",\n          repeat: Infinity,\n          repeatType: \"reverse\",\n        }}\n      />\n\n      {/* Rainy overlay effects */}\n      {weather.condition === \"rainy\" && (\n        <>\n          <motion.div\n            className=\"absolute inset-0 bg-[linear-gradient(180deg,transparent,rgba(0,0,0,0.2))]\"\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: [0, 0.4, 0] }}\n            transition={{ duration: 3, repeat: Infinity, ease: \"easeInOut\" }}\n          />\n          <motion.div\n            className=\"absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(0,0,0,0.1),transparent_70%)] mix-blend-multiply\"\n            initial={{ scale: 1 }}\n            animate={{ scale: [1, 1.1, 1] }}\n            transition={{\n              duration: 4,\n              repeat: Infinity,\n              repeatType: \"reverse\",\n              ease: \"easeInOut\",\n            }}\n          />\n          {/* Lightning effect - more random and natural */}\n          <motion.div\n            className=\"absolute inset-0 bg-white/5\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: [0, 0.7, 0.1, 0.4, 0] }}\n            transition={{\n              duration: 0.8,\n              repeat: Infinity,\n              repeatDelay: Math.random() * 8 + 5,\n              ease: [0.2, 0, 0.3, 1],\n            }}\n          />\n        </>\n      )}\n\n      {/* Cloudy overlay effects */}\n      {weather.condition === \"cloudy\" && (\n        <>\n          <motion.div\n            className=\"absolute inset-0 bg-gradient-to-t from-transparent via-white/5 to-transparent\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: [0, 0.3, 0] }}\n            transition={{ duration: 7, repeat: Infinity, ease: \"easeInOut\" }}\n          />\n          <motion.div\n            className=\"absolute inset-0 bg-[radial-gradient(ellipse_at_top,rgba(255,255,255,0.03),transparent_70%)]\"\n            initial={{ x: \"-100%\" }}\n            animate={{ x: \"100%\" }}\n            transition={{ duration: 25, repeat: Infinity, ease: \"linear\" }}\n          />\n          <motion.div\n            className=\"absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(0,0,0,0.05),transparent_70%)]\"\n            initial={{ scale: 1 }}\n            animate={{ scale: [1, 1.3, 1] }}\n            transition={{\n              duration: 10,\n              repeat: Infinity,\n              repeatType: \"reverse\",\n              ease: \"easeInOut\",\n            }}\n          />\n        </>\n      )}\n\n      {/* Sunny overlay effects */}\n      {weather.condition === \"sunny\" && (\n        <>\n          <motion.div\n            className=\"absolute inset-0 bg-[radial-gradient(circle_at_top,rgba(255,255,255,0.1),transparent_70%)]\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: [0.2, 0.5, 0.2] }}\n            transition={{ duration: 5, repeat: Infinity, ease: \"easeInOut\" }}\n          />\n          <motion.div\n            className=\"absolute inset-0 bg-[conic-gradient(from_0deg_at_50%_50%,rgba(255,255,255,0),rgba(255,255,255,0.08),rgba(255,255,255,0))]\"\n            animate={{ rotate: 360 }}\n            transition={{ duration: 30, repeat: Infinity, ease: \"linear\" }}\n          />\n          {/* Sun rays effect - more subtle and natural */}\n          <motion.div\n            className=\"absolute inset-0 overflow-hidden\"\n            initial={{ opacity: 0.2 }}\n            animate={{ opacity: 0.4 }}\n            transition={{\n              duration: 4,\n              repeat: Infinity,\n              repeatType: \"reverse\",\n              ease: \"easeInOut\",\n            }}\n          >\n            {Array.from({ length: 12 }).map((_, i) => (\n              <motion.div\n                key={i}\n                className=\"from-white/8 absolute left-1/2 top-0 h-full w-0.5 bg-gradient-to-b to-transparent\"\n                style={{\n                  transformOrigin: \"50% 0%\",\n                  transform: `rotate(${i * 30}deg)`,\n                }}\n                animate={{ scale: [1, 1.1, 1] }}\n                transition={{\n                  duration: 4,\n                  delay: i * 0.3,\n                  repeat: Infinity,\n                  repeatType: \"reverse\",\n                  ease: \"easeInOut\",\n                }}\n              />\n            ))}\n          </motion.div>\n        </>\n      )}\n\n      {/* Snowy overlay effects */}\n      {weather.condition === \"snowy\" && (\n        <>\n          <motion.div\n            className=\"absolute inset-0 bg-[radial-gradient(ellipse_at_top,rgba(255,255,255,0.05),transparent_70%)]\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: [0.2, 0.4, 0.2] }}\n            transition={{ duration: 8, repeat: Infinity, ease: \"easeInOut\" }}\n          />\n          {/* Frost effect - more subtle and crystalline */}\n          <motion.div\n            className=\"from-white/8 absolute inset-0 bg-gradient-to-b via-transparent to-white/5\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: [0.1, 0.3, 0.1] }}\n            transition={{ duration: 6, repeat: Infinity, ease: \"easeInOut\" }}\n          />\n          {/* Ice crystal patterns - more delicate movement */}\n          <div className=\"absolute inset-0 overflow-hidden\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <motion.div\n                key={i}\n                className=\"via-white/8 absolute left-1/2 top-1/2 h-3 w-[0.5px] bg-gradient-to-b from-white/30 to-transparent\"\n                style={{\n                  transformOrigin: \"50% 50%\",\n                  transform: `rotate(${i * 60}deg)`,\n                }}\n                initial={{ scale: 0.9 }}\n                animate={{ scale: [0.9, 1.1, 0.9] }}\n                transition={{\n                  duration: 10,\n                  delay: i * 0.4,\n                  repeat: Infinity,\n                  repeatType: \"reverse\",\n                  ease: \"easeInOut\",\n                }}\n              />\n            ))}\n          </div>\n        </>\n      )}\n\n      <canvas\n        ref={canvasRef}\n        className=\"pointer-events-none absolute inset-0\"\n        width={800}\n        height={600}\n      />\n\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={weather.condition}\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 1.05 }}\n          transition={{ duration: 0.3 }}\n          className=\"relative z-10 flex h-full flex-col items-center justify-center p-8 text-center\"\n        >\n          {weather.location && (\n            <motion.div\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className={cn(\n                \"absolute left-4 top-4 rounded-full px-4 py-2\",\n                getThemeStyles(),\n              )}\n            >\n              <span className=\"mr-2 inline-block animate-bounce\">📍</span>\n              {weather.location}\n            </motion.div>\n          )}\n\n          <motion.h1\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"mb-4 text-4xl font-bold tracking-tight text-white drop-shadow-lg\"\n          >\n            {title}\n          </motion.h1>\n          <motion.p\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.2 }}\n            className=\"mb-8 max-w-md text-lg text-white/90 drop-shadow\"\n          >\n            {subtitle}\n          </motion.p>\n\n          <motion.div\n            initial={{ scale: 0.8, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            transition={{\n              type: \"spring\",\n              stiffness: 200,\n              damping: 15,\n              delay: 0.4,\n            }}\n            className=\"mb-6 text-white\"\n          >\n            {weatherIcons[weather.condition]}\n          </motion.div>\n\n          <div className=\"flex flex-wrap items-center justify-center gap-4\">\n            <motion.div\n              whileHover={{ scale: 1.05, y: -2 }}\n              whileTap={{ scale: 0.95 }}\n              className={cn(\n                \"rounded-full px-6 py-2 shadow-lg transition-all duration-300\",\n                getThemeStyles(),\n              )}\n            >\n              {weather.temperature}°C\n            </motion.div>\n            <motion.div\n              whileHover={{ scale: 1.05, y: -2 }}\n              whileTap={{ scale: 0.95 }}\n              className={cn(\n                \"rounded-full px-6 py-2 capitalize shadow-lg transition-all duration-300\",\n                getThemeStyles(),\n              )}\n            >\n              {weather.condition}\n            </motion.div>\n            {showDetails && (\n              <>\n                <motion.div\n                  whileHover={{ scale: 1.05, y: -2 }}\n                  whileTap={{ scale: 0.95 }}\n                  className={cn(\n                    \"rounded-full px-6 py-2 shadow-lg transition-all duration-300\",\n                    getThemeStyles(),\n                  )}\n                >\n                  <span className=\"mr-2 inline-block animate-pulse\">💨</span>\n                  {weather.windSpeed} km/h\n                </motion.div>\n                <motion.div\n                  whileHover={{ scale: 1.05, y: -2 }}\n                  whileTap={{ scale: 0.95 }}\n                  className={cn(\n                    \"rounded-full px-6 py-2 shadow-lg transition-all duration-300\",\n                    getThemeStyles(),\n                  )}\n                >\n                  <span className=\"mr-2 inline-block animate-pulse\">💧</span>\n                  {weather.humidity}%\n                </motion.div>\n              </>\n            )}\n          </div>\n\n          {weather.time && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className={cn(\n                \"mx-auto mt-8 flex w-fit items-center gap-2 rounded-full px-6 py-2 shadow-lg\",\n                getThemeStyles(),\n              )}\n            >\n              <span className=\"text-base\">🕒</span>\n              <span className=\"text-sm font-semibold\">{weather.time}</span>\n            </motion.div>\n          )}\n\n          {weather.forecast && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.6 }}\n              className=\"[&::-webkit-scrollbar-track]:transparent mt-8 flex w-full gap-4 overflow-x-auto whitespace-nowrap pb-4 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-200/50 hover:[&::-webkit-scrollbar-thumb]:bg-gray-300/50 dark:[&::-webkit-scrollbar-thumb]:bg-gray-700/50 dark:hover:[&::-webkit-scrollbar-thumb]:bg-gray-600/50 [&::-webkit-scrollbar]:h-0\"\n            >\n              {weather.forecast.map((item, index) => (\n                <motion.div\n                  key={item.time}\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                  className={cn(\n                    \"flex min-w-[100px] shrink-0 flex-col items-center rounded-xl p-4 shadow-lg\",\n                    getThemeStyles(),\n                  )}\n                >\n                  <span className=\"text-sm font-medium\">{item.time}</span>\n                  <span className=\"my-2 text-2xl\">\n                    {weatherIcons[item.condition]}\n                  </span>\n                  <span className=\"text-sm font-bold\">\n                    {item.temperature}°C\n                  </span>\n                </motion.div>\n              ))}\n            </motion.div>\n          )}\n\n\n          {/* Weather-specific cursor effects */}\n          {isHovering && (\n            <>\n              {/* Sunny cursor effect */}\n              {weather.condition === \"sunny\" && (\n                <motion.div\n                  className=\"pointer-events-none absolute z-50\"\n                  style={{\n                    left: `${((mousePosition.x + 1) / 2) * 100}%`,\n                    top: `${((mousePosition.y + 1) / 2) * 100}%`,\n                    transform: \"translate(-50%, -50%)\",\n                  }}\n                >\n                  <motion.div\n                    className=\"absolute h-32 w-32 rounded-full bg-[radial-gradient(circle,rgba(255,220,110,0.15),transparent_70%)]\"\n                    animate={{\n                      scale: [1, 1.2, 1],\n                      opacity: [0.6, 0.8, 0.6],\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                </motion.div>\n              )}\n\n              {/* Rainy cursor effect */}\n              {weather.condition === \"rainy\" && (\n                <motion.div\n                  className=\"pointer-events-none absolute z-50\"\n                  style={{\n                    left: `${((mousePosition.x + 1) / 2) * 100}%`,\n                    top: `${((mousePosition.y + 1) / 2) * 100}%`,\n                    transform: \"translate(-50%, -50%)\",\n                  }}\n                >\n                  <motion.div\n                    className=\"absolute h-40 w-40\"\n                    initial={false}\n                    animate={{\n                      background: `radial-gradient(circle, rgba(0,0,0,${Math.min(0.2 + mouseSpeedRef.current, 0.4)}), transparent 70%)`,\n                    }}\n                  />\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <motion.div\n                      key={i}\n                      className=\"absolute h-12 w-[1px] bg-gradient-to-b from-white/20 to-transparent\"\n                      style={{\n                        left: \"50%\",\n                        transformOrigin: \"50% 0%\",\n                        transform: `rotate(${75 + i * 7}deg)`,\n                      }}\n                      animate={{\n                        opacity: [0, 0.5, 0],\n                        y: [-10, 20],\n                      }}\n                      transition={{\n                        duration: 0.4,\n                        delay: i * 0.08,\n                        repeat: Infinity,\n                      }}\n                    />\n                  ))}\n                </motion.div>\n              )}\n\n              {/* Snowy cursor effect */}\n              {weather.condition === \"snowy\" && (\n                <motion.div\n                  className=\"pointer-events-none absolute z-50\"\n                  style={{\n                    left: `${((mousePosition.x + 1) / 2) * 100}%`,\n                    top: `${((mousePosition.y + 1) / 2) * 100}%`,\n                    transform: \"translate(-50%, -50%)\",\n                  }}\n                >\n                  <motion.div\n                    className=\"absolute h-32 w-32 rounded-full bg-[radial-gradient(circle,rgba(255,255,255,0.1),transparent_70%)]\"\n                    animate={{\n                      scale: [1, 1.2, 1],\n                      opacity: [0.3, 0.5, 0.3],\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  {Array.from({ length: 6 }).map((_, i) => (\n                    <motion.div\n                      key={i}\n                      className=\"absolute left-1/2 top-1/2 h-3 w-[0.5px] bg-gradient-to-b from-white/30 to-transparent\"\n                      style={{\n                        transformOrigin: \"50% 50%\",\n                        transform: `rotate(${i * 60}deg)`,\n                      }}\n                      animate={{\n                        scale: [0.8, 1.2, 0.8],\n                        opacity: [0.3, 0.6, 0.3],\n                      }}\n                      transition={{\n                        duration: 2,\n                        delay: i * 0.2,\n                        repeat: Infinity,\n                      }}\n                    />\n                  ))}\n                </motion.div>\n              )}\n\n              {/* Cloudy cursor effect */}\n              {weather.condition === \"cloudy\" && (\n                <motion.div\n                  className=\"pointer-events-none absolute z-50\"\n                  style={{\n                    left: `${((mousePosition.x + 1) / 2) * 100}%`,\n                    top: `${((mousePosition.y + 1) / 2) * 100}%`,\n                    transform: \"translate(-50%, -50%)\",\n                  }}\n                >\n                  <motion.div\n                    className=\"absolute h-40 w-40\"\n                    animate={{\n                      background: [\n                        \"radial-gradient(circle, rgba(255,255,255,0.1), transparent 70%)\",\n                        \"radial-gradient(circle, rgba(255,255,255,0.15), transparent 70%)\",\n                        \"radial-gradient(circle, rgba(255,255,255,0.1), transparent 70%)\",\n                      ],\n                      scale: [1, 1.1, 1],\n                    }}\n                    transition={{ duration: 3, repeat: Infinity }}\n                  />\n                  <motion.div\n                    className=\"absolute h-24 w-24 rounded-full bg-gradient-to-b from-white/5 to-transparent\"\n                    animate={{\n                      x: [-20, 20, -20],\n                      opacity: [0.3, 0.5, 0.3],\n                    }}\n                    transition={{ duration: 4, repeat: Infinity }}\n                  />\n                </motion.div>\n              )}\n            </>\n          )}\n        </motion.div>\n      </AnimatePresence >\n    </motion.div >\n  );\n}\n\nfunction mapWeatherCondition(\n  code: number,\n): \"sunny\" | \"rainy\" | \"cloudy\" | \"snowy\" {\n  if (code >= 1000 && code < 2000) return \"sunny\";\n  if (code >= 2000 && code < 3000) return \"cloudy\";\n  if (code >= 3000 && code < 4000) return \"rainy\";\n  if (code >= 6000 && code < 7000) return \"snowy\";\n  return \"cloudy\";\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}