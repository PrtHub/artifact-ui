{
  "name": "border-flow",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/border-flow.tsx",
      "content": "import React, { useEffect, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface BorderFlowProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Width of the border in pixels\n   * @default 2\n   */\n  borderWidth?: number;\n  /**\n   * Color of the border gradient\n   * @default \"#22c55e\"\n   */\n  borderColor?: string;\n  /**\n   * Secondary color for gradient effect\n   * @default \"#3b82f6\"\n   */\n  secondaryColor?: string;\n  /**\n   * Speed of the border animation\n   * @default 1\n   */\n  speed?: number;\n  /**\n   * Length of the gradient as a percentage of the border\n   * @default 30\n   */\n  gradientLength?: number;\n  /**\n   * Whether to show the border on hover only\n   * @default false\n   */\n  hoverOnly?: boolean;\n}\n\nexport default function BorderFlow({\n  className,\n  children,\n  borderWidth = 2,\n  borderColor = \"#22c55e\",\n  secondaryColor = \"#3b82f6\",\n  speed = 1,\n  gradientLength = 30,\n  hoverOnly = false,\n  ...props\n}: BorderFlowProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const mousePos = useRef({ x: 0, y: 0 });\n  const isHovered = useRef(false);\n  const rafRef = useRef<number>();\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const updateMousePosition = (e: MouseEvent) => {\n      const rect = container.getBoundingClientRect();\n      mousePos.current = {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top,\n      };\n    };\n\n    const handleMouseEnter = () => {\n      isHovered.current = true;\n    };\n\n    const handleMouseLeave = () => {\n      isHovered.current = false;\n    };\n\n    const animate = () => {\n      const rect = container.getBoundingClientRect();\n      const perimeter = 2 * (rect.width + rect.height);\n      const gradientSize = (gradientLength / 100) * perimeter;\n\n      // Calculate the position along the border based on mouse position\n      let position;\n      const { x, y } = mousePos.current;\n\n      // Determine which edge the gradient should be on\n      if (y < borderWidth) {\n        // Top edge\n        position = x;\n      } else if (x > rect.width - borderWidth) {\n        // Right edge\n        position = rect.width + y;\n      } else if (y > rect.height - borderWidth) {\n        // Bottom edge\n        position = 2 * rect.width + rect.height - x;\n      } else {\n        // Left edge\n        position = 2 * (rect.width + rect.height) - y;\n      }\n\n      // Normalize position to perimeter\n      position = ((position % perimeter) + perimeter) % perimeter;\n\n      // Create gradient positions\n      const gradientStart = (position / perimeter) * 100;\n      const gradientEnd = ((position + gradientSize) / perimeter) * 100;\n\n      // Apply the gradient\n      if (!hoverOnly || isHovered.current) {\n        container.style.borderImage = `linear-gradient(to right, transparent ${gradientStart}%, ${borderColor} ${gradientStart}%, ${secondaryColor} ${\n          (gradientStart + gradientEnd) / 2\n        }%, ${borderColor} ${gradientEnd}%, transparent ${gradientEnd}%) 1`;\n      } else {\n        container.style.borderImage = \"none\";\n      }\n\n      rafRef.current = requestAnimationFrame(animate);\n    };\n\n    container.addEventListener(\"mousemove\", updateMousePosition);\n    container.addEventListener(\"mouseenter\", handleMouseEnter);\n    container.addEventListener(\"mouseleave\", handleMouseLeave);\n    animate();\n\n    return () => {\n      container.removeEventListener(\"mousemove\", updateMousePosition);\n      container.removeEventListener(\"mouseenter\", handleMouseEnter);\n      container.removeEventListener(\"mouseleave\", handleMouseLeave);\n      if (rafRef.current) {\n        cancelAnimationFrame(rafRef.current);\n      }\n    };\n  }, [borderColor, secondaryColor, gradientLength, hoverOnly]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"relative transition-colors\",\n        {\n          \"border-transparent\": true,\n          [`border-[${borderWidth}px]`]: true,\n        },\n        className\n      )}\n      style={{\n        borderStyle: \"solid\",\n      }}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}