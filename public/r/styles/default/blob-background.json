{
  "name": "blob-background",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui/blob-background.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport type { MotionStyle, Variants, Transition } from \"framer-motion\";\n\ninterface BlobProps {\n  color?: string;\n  size?: number;\n  blur?: number;\n  speed?: number;\n  opacity?: number;\n  zIndex?: number;\n  initialPosition?: { x: number; y: number };\n  pulseScale?: number;\n  rotationSpeed?: number;\n  gradientColors?: string[];\n}\n\nconst Blob = ({\n  color,\n  size = 400,\n  blur = 60,\n  speed = 20,\n  opacity = 0.5,\n  zIndex = 0,\n  initialPosition = { x: 50, y: 50 },\n  pulseScale = 1.1,\n  rotationSpeed = 10,\n  gradientColors,\n}: BlobProps) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const getRandomPoint = () => ({\n    x: Math.random() * 100,\n    y: Math.random() * 100,\n  });\n\n  const gradient = gradientColors\n    ? `linear-gradient(45deg, ${gradientColors.join(\", \")})`\n    : color;\n\n  const transition: Transition = {\n    duration: speed,\n    ease: \"easeInOut\",\n    repeat: Infinity,\n    repeatType: \"reverse\",\n  };\n\n  const rotateTransition: Transition = {\n    duration: speed * 2,\n    ease: \"linear\",\n    repeat: Infinity,\n    repeatType: \"loop\",\n  };\n\n  const variants: Variants = {\n    initial: {\n      x: `${initialPosition.x}%`,\n      y: `${initialPosition.y}%`,\n      scale: 1,\n      rotate: 0,\n    },\n    animate: {\n      x: [\n        `${initialPosition.x}%`,\n        `${getRandomPoint().x}%`,\n        `${getRandomPoint().x}%`,\n        `${initialPosition.x}%`,\n      ],\n      y: [\n        `${initialPosition.y}%`,\n        `${getRandomPoint().y}%`,\n        `${getRandomPoint().y}%`,\n        `${initialPosition.y}%`,\n      ],\n      scale: [1, pulseScale, 1],\n      rotate: 360,\n      transition: {\n        ...transition,\n        rotate: rotateTransition,\n      },\n    },\n    hover: {\n      scale: 1.1,\n      filter: `blur(${blur * 0.8}px)`,\n      transition: { duration: 0.3 },\n    },\n  };\n\n  const blobStyle: MotionStyle = {\n    position: \"absolute\" as const,\n    width: size,\n    height: size,\n    filter: `blur(${blur}px)`,\n    background: gradient || \"transparent\",\n    borderRadius: \"50%\",\n    opacity,\n    zIndex,\n    mixBlendMode: \"screen\" as const,\n  };\n\n  return (\n    <motion.div\n      style={blobStyle}\n      variants={variants}\n      initial=\"initial\"\n      animate=\"animate\"\n      whileHover=\"hover\"\n      onHoverStart={() => setIsHovered(true)}\n      onHoverEnd={() => setIsHovered(false)}\n    >\n      <AnimatePresence>\n        {isHovered && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.8 }}\n            style={{\n              position: \"absolute\",\n              inset: -10,\n              background: `radial-gradient(circle, ${\n                gradientColors?.[0] || color || \"#fff\"\n              }33 0%, transparent 70%)`,\n              borderRadius: \"50%\",\n            }}\n          />\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n};\n\ninterface BlobConfig extends BlobProps {\n  id: string;\n}\n\ninterface BlobBackgroundProps {\n  blobs?: BlobConfig[];\n  className?: string;\n}\n\nconst defaultBlobs: BlobConfig[] = [\n  {\n    id: \"blob1\",\n    gradientColors: [\"#FF0080\", \"#7928CA\"],\n    size: 400,\n    blur: 60,\n    speed: 15,\n    opacity: 0.3,\n    zIndex: 1,\n    initialPosition: { x: 20, y: 20 },\n    pulseScale: 1.2,\n    rotationSpeed: 8,\n  },\n  {\n    id: \"blob2\",\n    gradientColors: [\"#0070F3\", \"#00DFD8\"],\n    size: 300,\n    blur: 50,\n    speed: 20,\n    opacity: 0.2,\n    zIndex: 2,\n    initialPosition: { x: 60, y: 60 },\n    pulseScale: 1.15,\n    rotationSpeed: 12,\n  },\n  {\n    id: \"blob3\",\n    gradientColors: [\"#7928CA\", \"#FF0080\"],\n    size: 350,\n    blur: 55,\n    speed: 25,\n    opacity: 0.25,\n    zIndex: 3,\n    initialPosition: { x: 80, y: 30 },\n    pulseScale: 1.1,\n    rotationSpeed: 10,\n  },\n];\n\nexport default function BlobBackground({\n  blobs = defaultBlobs,\n  className = \"\",\n}: BlobBackgroundProps) {\n  return (\n    <div\n      className={`relative h-full w-full overflow-hidden ${className}`}\n      style={{\n        background: \"transparent\",\n      }}\n    >\n      {blobs.map((blob) => (\n        <Blob key={blob.id} {...blob} />\n      ))}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}