{
  "name": "magnetic-card",
  "type": "registry:ui",
  "dependencies": [
    "@/lib/utils"
  ],
  "files": [
    {
      "path": "ui/magnetic-card.tsx",
      "content": "import React, { useRef, useEffect, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface MagneticCardProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  magneticStrength?: number;\n  rotationStrength?: number;\n  scaleOnHover?: number;\n  showMagneticField?: boolean;\n  fieldColor?: string;\n  darkFieldColor?: string;\n}\n\nexport default function MagneticCard({\n  children,\n  className,\n  magneticStrength = 0.5,\n  rotationStrength = 15,\n  scaleOnHover = 1.1,\n  showMagneticField = false,\n  fieldColor = \"rgba(147, 51, 234, 0.15)\",\n  darkFieldColor = \"rgba(168, 85, 247, 0.25)\",\n  ...props\n}: MagneticCardProps) {\n  const cardRef = useRef<HTMLDivElement>(null);\n  const [isHovered, setIsHovered] = useState(false);\n  const fieldRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const card = cardRef.current;\n    const field = fieldRef.current;\n    if (!card) return;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const { left, top, width, height } = card.getBoundingClientRect();\n      const centerX = left + width / 2;\n      const centerY = top + height / 2;\n      const mouseX = e.clientX;\n      const mouseY = e.clientY;\n\n      // Calculate distance from mouse to card center\n      const deltaX = mouseX - centerX;\n      const deltaY = mouseY - centerY;\n      const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n      // Calculate magnetic pull (stronger when closer)\n      const maxDistance = Math.max(window.innerWidth, window.innerHeight) / 2;\n      const pull = Math.max(0, 1 - distance / maxDistance);\n\n      // Calculate rotation based on mouse position\n      const rotateX = (deltaY / height) * rotationStrength;\n      const rotateY = -(deltaX / width) * rotationStrength;\n\n      // Apply transform with easing\n      const moveX = deltaX * pull * magneticStrength;\n      const moveY = deltaY * pull * magneticStrength;\n\n      const transform = `\n        translate(${moveX}px, ${moveY}px)\n        rotateX(${rotateX}deg)\n        rotateY(${rotateY}deg)\n        scale(${isHovered ? scaleOnHover : 1})\n      `;\n\n      card.style.transform = transform;\n      card.style.transition = \"transform 0.3s cubic-bezier(0.23, 1, 0.32, 1)\";\n\n      // Update magnetic field effect if enabled\n      if (showMagneticField && field) {\n        const fieldScale = 1 + pull * 0.5;\n        field.style.transform = `scale(${fieldScale})`;\n        field.style.opacity = (pull * 0.5).toString();\n      }\n    };\n\n    const handleMouseEnter = () => {\n      setIsHovered(true);\n      if (showMagneticField && field) {\n        field.style.opacity = \"0.3\";\n      }\n    };\n\n    const handleMouseLeave = () => {\n      setIsHovered(false);\n      card.style.transform = \"translate(0, 0) rotateX(0) rotateY(0) scale(1)\";\n      if (showMagneticField && field) {\n        field.style.transform = \"scale(1)\";\n        field.style.opacity = \"0\";\n      }\n    };\n\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    card.addEventListener(\"mouseenter\", handleMouseEnter);\n    card.addEventListener(\"mouseleave\", handleMouseLeave);\n\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      card.removeEventListener(\"mouseenter\", handleMouseEnter);\n      card.removeEventListener(\"mouseleave\", handleMouseLeave);\n    };\n  }, [\n    magneticStrength,\n    rotationStrength,\n    scaleOnHover,\n    isHovered,\n    showMagneticField,\n  ]);\n\n  return (\n    <div className=\"relative\" style={{ perspective: \"1000px\" }}>\n      {showMagneticField && (\n        <div\n          ref={fieldRef}\n          className=\"absolute inset-0 -z-10 rounded-[inherit] dark:[--mode-field-color:var(--dark-field-color)] [--dark-field-color:var(--_dark-field-color)]\"\n          style={\n            {\n              background: `radial-gradient(circle at center, var(--field-color) 0%, transparent 70%)`,\n              transform: \"scale(1.5)\",\n              opacity: 0,\n              transition: \"transform 0.3s ease, opacity 0.3s ease\",\n              \"--field-color\": `var(--mode-field-color, ${fieldColor})`,\n              \"--_dark-field-color\": darkFieldColor,\n            } as React.CSSProperties\n          }\n        />\n      )}\n      <div\n        ref={cardRef}\n        className={cn(\n          \"relative rounded-lg bg-card text-card-foreground shadow-sm dark:shadow-lg dark:shadow-purple-500/5 transition-all will-change-transform\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}