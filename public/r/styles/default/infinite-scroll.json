{
  "name": "infinite-scroll",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui/infinite-scroll.tsx",
      "content": "import React, { useRef, useEffect, useState } from \"react\";\nimport { motion, useAnimationControls } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface InfiniteScrollProps {\n  /** Additional CSS classes to apply to the container */\n  className?: string;\n  /** Duration of the scroll animation in milliseconds. Default is 15000 */\n  duration?: number;\n  /** Direction of the scroll animation. Can be \"normal\" (left to right) or \"reverse\" (right to left) */\n  direction?: \"normal\" | \"reverse\";\n  /** Background color for the fade effect container. Default is \"#ffffff\" */\n  containerColor?: string;\n  /** Whether to show the fade effect at the edges. Default is true */\n  showFade?: boolean;\n  /** Content to be scrolled infinitely */\n  children: React.ReactNode;\n  /** Whether to pause the animation when hovering over the content. Default is true */\n  pauseOnHover?: boolean;\n}\n\nexport function InfiniteScroll({\n  className,\n  duration = 15000,\n  direction = \"normal\",\n  containerColor = \"#ffffff\",\n  showFade = true,\n  children,\n  pauseOnHover = true,\n}: InfiniteScrollProps) {\n  const [contentWidth, setContentWidth] = useState<number>(0);\n  const [isPaused, setIsPaused] = useState(false);\n  const scrollerRef = useRef<HTMLDivElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const controls = useAnimationControls();\n  const elapsedTimeRef = useRef(0);\n  const lastTimeRef = useRef(0);\n\n  useEffect(() => {\n    const content = contentRef.current;\n    if (!content) return;\n\n    const updateWidth = () => {\n      const width = content.offsetWidth;\n      setContentWidth(width);\n    };\n\n    updateWidth();\n    window.addEventListener('resize', updateWidth);\n    return () => window.removeEventListener('resize', updateWidth);\n  }, [children]);\n\n  useEffect(() => {\n    if (!contentWidth) return;\n\n    const startX = direction === \"normal\" ? 0 : -contentWidth;\n    const endX = direction === \"normal\" ? -contentWidth : 0;\n\n    if (!isPaused) {\n      const remainingDuration = duration - elapsedTimeRef.current;\n      const progress = elapsedTimeRef.current / duration;\n      const currentX = direction === \"normal\"\n        ? startX + (endX - startX) * progress\n        : endX + (startX - endX) * (1 - progress);\n\n      controls.set({ x: currentX });\n      controls.start({\n        x: endX,\n        transition: {\n          duration: remainingDuration / 1000,\n          ease: \"linear\",\n          repeat: Infinity,\n          repeatType: \"loop\",\n          repeatDelay: 0,\n        },\n      });\n\n      lastTimeRef.current = Date.now();\n    }\n  }, [controls, direction, duration, contentWidth, isPaused]);\n\n  const handleMouseEnter = () => {\n    if (!pauseOnHover) return;\n\n    const currentTime = Date.now();\n    const deltaTime = currentTime - lastTimeRef.current;\n    elapsedTimeRef.current = (elapsedTimeRef.current + deltaTime) % duration;\n\n    setIsPaused(true);\n    controls.stop();\n  };\n\n  const handleMouseLeave = () => {\n    if (!pauseOnHover) return;\n    lastTimeRef.current = Date.now();\n    setIsPaused(false);\n  };\n\n  return (\n    <div\n      className={cn(\n        \"relative flex shrink-0 flex-col gap-4 overflow-hidden py-3\",\n        className,\n      )}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <div className=\"flex\">\n        <motion.div\n          ref={scrollerRef}\n          className=\"flex shrink-0\"\n          animate={controls}\n        >\n          <div ref={contentRef} className=\"flex shrink-0\">\n            {children}\n          </div>\n          <div className=\"flex shrink-0\">\n            {children}\n          </div>\n          <div className=\"flex shrink-0\">\n            {children}\n          </div>\n        </motion.div>\n      </div>\n      {showFade && (\n        <div\n          className=\"pointer-events-none absolute inset-0 bg-gradient-to-r from-background via-transparent to-background\"\n          style={{ '--container-color': containerColor } as React.CSSProperties}\n        />\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}