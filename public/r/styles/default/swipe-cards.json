{
  "name": "swipe-cards",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui/swipe-cards.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion, useMotionValue, useTransform } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport Image from \"next/image\";\n\nexport interface CardData {\n  id: number;\n  url: string;\n}\n\nexport interface SwipeCardsProps extends React.HTMLAttributes<HTMLDivElement> {\n  data: CardData[];\n  onSwipe?: (id: number, direction: \"left\" | \"right\") => void;\n  className?: string;\n}\n\nexport interface CardProps extends CardData {\n  cards: CardData[];\n  setCards: React.Dispatch<React.SetStateAction<CardData[]>>;\n  onSwipe?: (id: number, direction: \"left\" | \"right\") => void;\n  className?: string;\n}\n\nexport function SwipeCards({\n  data,\n  onSwipe,\n  className,\n  ...props\n}: SwipeCardsProps) {\n  const [cards, setCards] = React.useState<CardData[]>(data);\n\n  return (\n    <div\n      className={cn(\n        \"relative grid h-full w-full place-items-center bg-neutral-100\",\n        className\n      )}\n      style={{\n        backgroundImage: `url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='32' height='32' fill='none' stroke-width='2' stroke='%23d4d4d4'%3e%3cpath d='M0 .5H31.5V32'/%3e%3c/svg%3e\")`,\n      }}\n      {...props}\n    >\n      {cards.map((card) => (\n        <Card\n          key={card.id}\n          cards={cards}\n          setCards={setCards}\n          onSwipe={onSwipe}\n          {...card}\n        />\n      ))}\n      {cards.length === 0 && (\n        <div className=\"text-muted-foreground\">No more cards</div>\n      )}\n    </div>\n  );\n}\n\nfunction Card({ id, url, setCards, cards, onSwipe, className }: CardProps) {\n  const x = useMotionValue(0);\n  const rotateRaw = useTransform(x, [-150, 150], [-18, 18]);\n  const opacity = useTransform(x, [-150, 0, 150], [0, 1, 0]);\n  const isFront = id === cards[cards.length - 1].id;\n\n  const rotate = useTransform(() => {\n    const offset = isFront ? 0 : id % 2 ? 6 : -6;\n    return `${rotateRaw.get() + offset}deg`;\n  });\n\n  const handleDragEnd = () => {\n    const xVal = x.get();\n    if (Math.abs(xVal) > 100) {\n      setCards((pv) => pv.filter((v) => v.id !== id));\n      onSwipe?.(id, xVal > 0 ? \"right\" : \"left\");\n    }\n  };\n\n  const [imageError, setImageError] = React.useState(false);\n\n  return (\n    <motion.div\n      className={cn(\n        \"h-96 w-72 origin-bottom rounded-lg bg-white shadow-lg\",\n        className\n      )}\n      style={{\n        gridRow: 1,\n        gridColumn: 1,\n        x,\n        opacity,\n        rotate,\n        transition: \"0.125s transform\",\n        boxShadow: isFront\n          ? \"0 20px 25px -5px rgb(0 0 0 / 0.5), 0 8px 10px -6px rgb(0 0 0 / 0.5)\"\n          : undefined,\n      }}\n      animate={{\n        scale: isFront ? 1 : 0.98,\n      }}\n      drag={isFront ? \"x\" : false}\n      dragConstraints={{\n        left: 0,\n        right: 0,\n      }}\n      onDragEnd={handleDragEnd}\n    >\n      {imageError ? (\n        <div className=\"flex h-full w-full items-center justify-center rounded-lg bg-muted text-muted-foreground\">\n          Failed to load image\n        </div>\n      ) : (\n        <Image\n          src={url}\n          alt=\"Swipeable card\"\n          fill\n          className=\"h-full w-full rounded-lg object-cover\"\n          onError={() => setImageError(true)}\n        />\n      )}\n    </motion.div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}