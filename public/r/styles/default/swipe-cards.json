{
  "name": "swipe-cards",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui/swipe-cards.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion, useMotionValue, useTransform } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport Image from \"next/image\";\n\nexport interface CardData {\n  id: number;\n  url: string;\n  name?: string;\n  age?: number;\n  location?: string;\n  bio?: string;\n  interests?: string[];\n}\n\nexport interface SwipeCardsProps extends React.HTMLAttributes<HTMLDivElement> {\n  data: CardData[];\n  onSwipe?: (id: number, direction: \"left\" | \"right\") => void;\n  className?: string;\n}\n\nexport interface CardProps extends CardData {\n  cards: CardData[];\n  setCards: React.Dispatch<React.SetStateAction<CardData[]>>;\n  onSwipe?: (id: number, direction: \"left\" | \"right\") => void;\n  className?: string;\n}\n\nexport function SwipeCards({\n  data,\n  onSwipe,\n  className,\n  ...props\n}: SwipeCardsProps) {\n  const [cards, setCards] = React.useState<CardData[]>(data);\n\n  return (\n    <div\n      className={cn(\n        \"relative grid h-full w-full place-items-center\",\n        className\n      )}\n      {...props}\n    >\n      {cards.map((card) => (\n        <Card\n          key={card.id}\n          cards={cards}\n          setCards={setCards}\n          onSwipe={onSwipe}\n          {...card}\n        />\n      ))}\n      {cards.length === 0 && (\n        <div className=\"text-muted-foreground\">No more profiles</div>\n      )}\n    </div>\n  );\n}\n\nfunction Card({\n  id,\n  url,\n  name,\n  age,\n  location,\n  bio,\n  interests,\n  setCards,\n  cards,\n  onSwipe,\n  className,\n}: CardProps) {\n  const x = useMotionValue(0);\n  const rotateRaw = useTransform(x, [-150, 150], [-18, 18]);\n  const opacity = useTransform(x, [-150, 0, 150], [0, 1, 0]);\n  const isFront = id === cards[cards.length - 1].id;\n\n  const rotate = useTransform(() => {\n    const offset = isFront ? 0 : id % 2 ? 6 : -6;\n    return `${rotateRaw.get() + offset}deg`;\n  });\n\n  const handleDragEnd = () => {\n    const xVal = x.get();\n    if (Math.abs(xVal) > 100) {\n      setCards((pv) => pv.filter((v) => v.id !== id));\n      onSwipe?.(id, xVal > 0 ? \"right\" : \"left\");\n    }\n  };\n\n  const [imageError, setImageError] = React.useState(false);\n\n  return (\n    <motion.div\n      className={cn(\n        \"relative h-96 w-72 origin-bottom select-none rounded-lg shadow-lg\",\n        isFront && \"cursor-grab active:cursor-grabbing\",\n        className\n      )}\n      style={{\n        gridRow: 1,\n        gridColumn: 1,\n        x,\n        opacity,\n        rotate,\n        transition: \"0.125s transform\",\n        touchAction: \"none\",\n        boxShadow: isFront\n          ? \"0 20px 25px -5px rgb(0 0 0 / 0.5), 0 8px 10px -6px rgb(0 0 0 / 0.5)\"\n          : undefined,\n      }}\n      animate={{\n        scale: isFront ? 1 : 0.98,\n      }}\n      drag={isFront ? \"x\" : false}\n      dragConstraints={{ left: -1000, right: 1000 }}\n      dragElastic={0.15}\n      dragSnapToOrigin\n      onDragEnd={handleDragEnd}\n      whileTap={{ scale: 0.98 }}\n      whileDrag={{ scale: 1.02 }}\n    >\n      {imageError ? (\n        <div className=\"flex h-full w-full items-center justify-center rounded-lg bg-muted text-muted-foreground\">\n          Failed to load image\n        </div>\n      ) : (\n        <div className=\"relative h-full w-full overflow-hidden rounded-lg\">\n          <Image\n            src={url}\n            alt={`${name}'s profile`}\n            fill\n            sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n            className=\"pointer-events-none object-cover\"\n            onError={() => setImageError(true)}\n            priority={isFront}\n          />\n          <div className=\"absolute inset-x-0 bottom-0 bg-gradient-to-t from-black/80 to-transparent p-4 text-white\">\n            <div className=\"flex items-center gap-2\">\n              {name && <h3 className=\"text-xl font-semibold\">{name}</h3>}\n              {age && <span className=\"text-lg\">{age}</span>}\n            </div>\n            {location && <p className=\"text-sm text-gray-200\">{location}</p>}\n            {bio && <p className=\"mt-2 line-clamp-2 text-sm\">{bio}</p>}\n            {interests && interests.length > 0 && (\n              <div className=\"mt-2 flex flex-wrap gap-1\">\n                {interests.map((interest) => (\n                  <span\n                    key={interest}\n                    className=\"rounded-full bg-white/20 px-2 py-0.5 text-xs\"\n                  >\n                    {interest}\n                  </span>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </motion.div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}