{
  "name": "holographic-card",
  "type": "registry:ui",
  "dependencies": [
    "@/lib/utils"
  ],
  "files": [
    {
      "path": "ui/holographic-card.tsx",
      "content": "import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface HolographicCardProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  holographicIntensity?: number;\n  rotationFactor?: number;\n  glowIntensity?: number;\n  prismaticEffect?: boolean;\n  backgroundColor?: string;\n  darkBackgroundColor?: string;\n  scanlineEffect?: boolean;\n  refractionPattern?: \"none\" | \"diamond\" | \"wave\" | \"circuit\";\n  depthEffect?: boolean;\n  glitchEffect?: boolean;\n  shadowColor?: string;\n}\n\ninterface CSSPropertiesWithCustomVars extends React.CSSProperties {\n  \"--mouse-x\"?: string;\n  \"--mouse-y\"?: string;\n  \"--background-color-dark\"?: string;\n  \"--refraction-pattern\"?: string;\n  \"--refraction-pattern-dark\"?: string;\n  \"--glow-intensity\"?: number;\n  \"--holographic-intensity\"?: number;\n}\n\nexport default function HolographicCard({\n  children,\n  className,\n  holographicIntensity = 0.4,\n  rotationFactor = 12,\n  glowIntensity = 0.8,\n  prismaticEffect = true,\n  backgroundColor = \"rgba(255, 255, 255, 0.1)\",\n  darkBackgroundColor = \"rgba(20, 20, 30, 0.8)\",\n  scanlineEffect = false,\n  refractionPattern = \"none\",\n  depthEffect = false,\n  glitchEffect = false,\n  shadowColor = \"rgba(0, 0, 0, 0.5)\",\n  ...props\n}: HolographicCardProps) {\n  const cardRef = React.useRef<HTMLDivElement>(null);\n  const [mousePosition, setMousePosition] = React.useState({ x: 0, y: 0 });\n  const [isHovered, setIsHovered] = React.useState(false);\n  const [glitchOffset, setGlitchOffset] = React.useState({ x: 0, y: 0 });\n\n  // Glitch effect\n  React.useEffect(() => {\n    if (!glitchEffect || !isHovered) return;\n\n    const glitchInterval = setInterval(() => {\n      if (Math.random() > 0.92) {\n        setGlitchOffset({\n          x: (Math.random() - 0.5) * 10,\n          y: (Math.random() - 0.5) * 10,\n        });\n        setTimeout(() => setGlitchOffset({ x: 0, y: 0 }), 50);\n      }\n    }, 100);\n\n    return () => clearInterval(glitchInterval);\n  }, [glitchEffect, isHovered]);\n\n  React.useEffect(() => {\n    const card = cardRef.current;\n    if (!card) return;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const rect = card.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n\n      // Convert coordinates to percentages\n      const percentX = x / rect.width;\n      const percentY = y / rect.height;\n\n      setMousePosition({ x: percentX, y: percentY });\n\n      // Calculate rotation angles based on mouse position\n      const rotateY = (percentX - 0.5) * rotationFactor;\n      const rotateX = (0.5 - percentY) * rotationFactor;\n\n      // Calculate holographic gradient angle\n      const angle =\n        Math.atan2(y - rect.height / 2, x - rect.width / 2) * (180 / Math.PI);\n\n      // Apply transforms with depth effect\n      const scale = isHovered ? 1.02 : 1;\n      const translateZ = depthEffect ? (isHovered ? \"50px\" : \"0px\") : \"0px\";\n\n      card.style.transform = `\n        perspective(1000px)\n        rotateX(${rotateX}deg)\n        rotateY(${rotateY}deg)\n        scale(${scale})\n        translateZ(${translateZ})\n        translate(${glitchOffset.x}px, ${glitchOffset.y}px)\n      `;\n\n      // Update holographic effect\n      if (prismaticEffect) {\n        const hue = (angle + 360) % 360;\n        const lightness = \"60%\"; // Light mode\n        const darkLightness = \"65%\"; // Dark mode - slightly brighter\n        const gradient = `\n          linear-gradient(\n            ${angle}deg,\n            hsl(${hue}, 100%, ${lightness}) 0%,\n            hsl(${(hue + 60) % 360}, 100%, ${lightness}) 50%,\n            hsl(${(hue + 120) % 360}, 100%, ${lightness}) 100%\n          )\n        `;\n        const darkGradient = `\n          linear-gradient(\n            ${angle}deg,\n            hsl(${hue}, 100%, ${darkLightness}) 0%,\n            hsl(${(hue + 60) % 360}, 100%, ${darkLightness}) 50%,\n            hsl(${(hue + 120) % 360}, 100%, ${darkLightness}) 100%\n          )\n        `;\n        card.style.setProperty(\"--holographic-gradient\", gradient);\n        card.style.setProperty(\"--holographic-gradient-dark\", darkGradient);\n      }\n    };\n\n    const handleMouseEnter = () => {\n      setIsHovered(true);\n      card.style.transition = \"transform 0.1s ease-out\";\n    };\n\n    const handleMouseLeave = () => {\n      setIsHovered(false);\n      setGlitchOffset({ x: 0, y: 0 });\n      card.style.transform =\n        \"perspective(1000px) rotateX(0deg) rotateY(0deg) scale(1) translateZ(0px)\";\n      card.style.transition = \"transform 0.5s ease-out\";\n    };\n\n    card.addEventListener(\"mousemove\", handleMouseMove);\n    card.addEventListener(\"mouseenter\", handleMouseEnter);\n    card.addEventListener(\"mouseleave\", handleMouseLeave);\n\n    return () => {\n      card.removeEventListener(\"mousemove\", handleMouseMove);\n      card.removeEventListener(\"mouseenter\", handleMouseEnter);\n      card.removeEventListener(\"mouseleave\", handleMouseLeave);\n    };\n  }, [\n    rotationFactor,\n    holographicIntensity,\n    prismaticEffect,\n    depthEffect,\n    isHovered,\n    glitchOffset,\n  ]);\n\n  // Generate refraction pattern\n  const getRefractionPattern = (isDark = false) => {\n    const opacity = isDark ? \"0.15\" : \"0.1\";\n    switch (refractionPattern) {\n      case \"diamond\":\n        return `repeating-linear-gradient(45deg, transparent, transparent 10px, rgba(255,255,255,${opacity}) 10px, rgba(255,255,255,${opacity}) 20px)`;\n      case \"wave\":\n        return `repeating-radial-gradient(circle at 50% 50%, transparent 0, transparent 20px, rgba(255,255,255,${opacity}) 20px, rgba(255,255,255,${opacity}) 40px)`;\n      case \"circuit\":\n        return `\n          linear-gradient(90deg, transparent 50%, rgba(255,255,255,${opacity}) 50%),\n          linear-gradient(0deg, transparent 50%, rgba(255,255,255,${opacity}) 50%)\n        `;\n      default:\n        return \"none\";\n    }\n  };\n\n  const customStyle: CSSPropertiesWithCustomVars = {\n    \"--mouse-x\": `${mousePosition.x * 100}%`,\n    \"--mouse-y\": `${mousePosition.y * 100}%`,\n    backgroundColor,\n    \"--background-color-dark\": darkBackgroundColor,\n    boxShadow: `\n      0 10px 30px -10px ${shadowColor},\n      0 0 ${glowIntensity * 20}px ${glowIntensity * 5}px rgba(255, 255, 255, 0.1)\n    `,\n    \"--refraction-pattern\": getRefractionPattern(),\n    \"--refraction-pattern-dark\": getRefractionPattern(true),\n    \"--glow-intensity\": glowIntensity,\n    \"--holographic-intensity\": holographicIntensity,\n  };\n\n  return (\n    <div\n      ref={cardRef}\n      className={cn(\n        \"relative overflow-hidden rounded-xl transition-all duration-200\",\n        \"before:absolute before:inset-0 before:z-10\",\n        \"before:bg-[var(--holographic-gradient)] dark:before:bg-[var(--holographic-gradient-dark)]\",\n        \"before:pointer-events-none before:opacity-[0.15] before:mix-blend-overlay\",\n        \"dark:before:opacity-[0.2] dark:before:mix-blend-overlay\",\n        \"after:absolute after:inset-0 after:z-20\",\n        \"after:bg-[radial-gradient(circle_at_var(--mouse-x)_var(--mouse-y),rgba(255,255,255,0.15)_0%,transparent_80%)]\",\n        \"dark:after:bg-[radial-gradient(circle_at_var(--mouse-x)_var(--mouse-y),rgba(255,255,255,0.2)_0%,transparent_80%)]\",\n        \"after:pointer-events-none\",\n        scanlineEffect && \"holo-scanlines dark:holo-scanlines-dark\",\n        className,\n      )}\n      style={customStyle}\n      {...props}\n    >\n      <div\n        className={cn(\n          \"relative z-30\",\n          refractionPattern !== \"none\" &&\n            \"before:absolute before:inset-0 before:z-0 before:opacity-30\",\n          refractionPattern !== \"none\" &&\n            \"before:bg-[var(--refraction-pattern)]\",\n          refractionPattern !== \"none\" &&\n            \"dark:before:bg-[var(--refraction-pattern-dark)]\",\n          refractionPattern !== \"none\" && \"dark:before:opacity-40\",\n        )}\n      >\n        {children}\n      </div>\n      {scanlineEffect && (\n        <style jsx>{`\n          .holo-scanlines::before {\n            content: \"\";\n            position: absolute;\n            inset: 0;\n            z-index: 15;\n            background: repeating-linear-gradient(\n              0deg,\n              transparent 0%,\n              rgba(255, 255, 255, 0.05) 0.5px,\n              transparent 1px\n            );\n            pointer-events: none;\n            mix-blend-mode: overlay;\n          }\n          .holo-scanlines-dark::before {\n            background: repeating-linear-gradient(\n              0deg,\n              transparent 0%,\n              rgba(255, 255, 255, 0.08) 0.5px,\n              transparent 1px\n            );\n            mix-blend-mode: overlay;\n          }\n          @media (prefers-color-scheme: dark) {\n            div {\n              background-color: var(--background-color-dark);\n            }\n          }\n        `}</style>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}