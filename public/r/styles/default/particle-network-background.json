{
  "name": "particle-network-background",
  "type": "registry:ui",
  "dependencies": [],
  "files": [
    {
      "path": "ui-canvas/particle-network-background.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\n\ninterface Particle {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  size: number;\n}\n\ninterface ParticleNetworkBackgroundProps {\n  particleCount?: number;\n  particleSize?: number;\n  particleColor?: string;\n  lineColor?: string;\n  maxDistance?: number;\n  speed?: number;\n  className?: string;\n}\n\nexport default function ParticleNetworkBackground({\n  particleCount = 50,\n  particleSize = 2,\n  particleColor = \"#4a90e2\",\n  lineColor = \"rgba(74, 144, 226, 0.2)\",\n  maxDistance = 100,\n  speed = 1,\n  className = \"\",\n}: ParticleNetworkBackgroundProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [particles, setParticles] = useState<Particle[]>([]);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const animationFrameId = useRef<number>();\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      initParticles();\n    };\n\n    const handleMouseMove = (e: MouseEvent) => {\n      setMousePosition({ x: e.clientX, y: e.clientY });\n    };\n\n    const initParticles = () => {\n      const newParticles: Particle[] = [];\n      for (let i = 0; i < particleCount; i++) {\n        newParticles.push({\n          x: Math.random() * canvas.width,\n          y: Math.random() * canvas.height,\n          vx: (Math.random() - 0.5) * speed,\n          vy: (Math.random() - 0.5) * speed,\n          size: particleSize,\n        });\n      }\n      setParticles(newParticles);\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    handleResize();\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, [particleCount, particleSize, speed]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Update and draw particles\n      const updatedParticles = particles.map((particle) => {\n        // Update position\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n\n        // Bounce off walls\n        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\n        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\n\n        // Draw particle\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n        ctx.fillStyle = particleColor;\n        ctx.fill();\n\n        return particle;\n      });\n\n      // Draw connections\n      ctx.beginPath();\n      for (let i = 0; i < updatedParticles.length; i++) {\n        const particle1 = updatedParticles[i];\n\n        // Connect to mouse if within range\n        const mouseDistance = Math.hypot(\n          mousePosition.x - particle1.x,\n          mousePosition.y - particle1.y,\n        );\n        if (mouseDistance < maxDistance) {\n          ctx.moveTo(particle1.x, particle1.y);\n          ctx.lineTo(mousePosition.x, mousePosition.y);\n        }\n\n        // Connect to other particles\n        for (let j = i + 1; j < updatedParticles.length; j++) {\n          const particle2 = updatedParticles[j];\n          const distance = Math.hypot(\n            particle2.x - particle1.x,\n            particle2.y - particle1.y,\n          );\n\n          if (distance < maxDistance) {\n            ctx.moveTo(particle1.x, particle1.y);\n            ctx.lineTo(particle2.x, particle2.y);\n          }\n        }\n      }\n      ctx.strokeStyle = lineColor;\n      ctx.stroke();\n\n      setParticles(updatedParticles);\n      animationFrameId.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, [particles, particleColor, lineColor, maxDistance, mousePosition]);\n\n  return (\n    <canvas ref={canvasRef} className={`fixed inset-0 -z-10 ${className}`} />\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}