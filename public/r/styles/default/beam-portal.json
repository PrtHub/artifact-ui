{
  "name": "beam-portal",
  "type": "registry:ui",
  "dependencies": [
    ""
  ],
  "files": [
    {
      "path": "ui/beam-portal.tsx",
      "content": "import React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport type PortalVariant =\n  | \"matrix\"\n  | \"sunset\"\n  | \"aurora\"\n  | \"cosmic\"\n  | \"cyber\"\n  | \"frost\"\n  | \"fire\"\n  | \"void\";\n\nexport type PortalPattern = \"linear\" | \"radial\" | \"wave\" | \"pulse\" | \"zigzag\";\n\nexport interface BeamPortalProps extends React.HTMLAttributes<HTMLDivElement> {\n  className?: string;\n  /** Color scheme of the portal. Default is aurora */\n  colorScheme?: PortalVariant;\n  /** Animation pattern for beams. Default is radial */\n  pattern?: PortalPattern;\n  /** Animation intensity level. Default is active */\n  intensity?: \"calm\" | \"active\" | \"intense\";\n  /** Whether to reverse the animation direction */\n  reverse?: boolean;\n  /** Whether to add a shimmer effect */\n  shimmer?: boolean;\n  /** Whether to add a pulse effect */\n  pulse?: boolean;\n  /** Whether to use random distribution for beams */\n  randomize?: boolean;\n  /** Blur amount for glow effects (px) */\n  blurAmount?: number;\n  /** Children to render in portal */\n  children: React.ReactNode;\n}\n\nconst colorSchemes = {\n  matrix: {\n    primary: \"0, 255, 0\",\n    secondary: \"0, 200, 0\",\n    tertiary: \"0, 150, 0\",\n  },\n  sunset: {\n    primary: \"255, 100, 0\",\n    secondary: \"255, 50, 100\",\n    tertiary: \"200, 0, 150\",\n  },\n  aurora: {\n    primary: \"0, 255, 200\",\n    secondary: \"100, 200, 255\",\n    tertiary: \"150, 100, 255\",\n  },\n  cosmic: {\n    primary: \"255, 0, 255\",\n    secondary: \"150, 0, 255\",\n    tertiary: \"50, 0, 200\",\n  },\n  cyber: {\n    primary: \"0, 255, 255\",\n    secondary: \"0, 150, 255\",\n    tertiary: \"0, 100, 255\",\n  },\n  frost: {\n    primary: \"200, 255, 255\",\n    secondary: \"150, 200, 255\",\n    tertiary: \"100, 150, 255\",\n  },\n  fire: {\n    primary: \"255, 150, 0\",\n    secondary: \"255, 100, 0\",\n    tertiary: \"255, 50, 0\",\n  },\n  void: {\n    primary: \"100, 0, 255\",\n    secondary: \"50, 0, 200\",\n    tertiary: \"25, 0, 150\",\n  },\n};\n\nconst intensitySettings = {\n  calm: { speed: 10, opacity: 0.2, count: 4, delay: 0.5 },\n  active: { speed: 7, opacity: 0.3, count: 6, delay: 0.3 },\n  intense: { speed: 5, opacity: 0.4, count: 8, delay: 0.2 },\n};\n\nconst patternStyles = {\n  linear: {\n    transform: \"translateY(var(--offset))\",\n    animation: \"beam-drop\",\n  },\n  radial: {\n    transform: \"rotate(var(--beam-angle))\",\n    animation: \"beam-drop\",\n  },\n  wave: {\n    transform: \"rotate(var(--beam-angle)) translateX(var(--wave-offset))\",\n    animation: \"beam-wave\",\n  },\n  pulse: {\n    transform: \"scale(var(--pulse-scale))\",\n    animation: \"beam-pulse\",\n  },\n  zigzag: {\n    transform: \"rotate(var(--beam-angle)) translateX(var(--zigzag-offset))\",\n    animation: \"beam-zigzag\",\n  },\n};\n\nfunction BeamRing({\n  colors,\n  count,\n  radius,\n  settings,\n  pattern,\n  reverse,\n  shimmer,\n  pulse,\n  randomize,\n  blurAmount,\n  rotateSpeed,\n}: {\n  colors: { base: string; glow: string };\n  count: number;\n  radius: string;\n  settings: { speed: number; opacity: number; delay: number };\n  pattern: PortalPattern;\n  reverse?: boolean;\n  shimmer?: boolean;\n  pulse?: boolean;\n  randomize?: boolean;\n  blurAmount?: number;\n  rotateSpeed?: number;\n}) {\n  const getPosition = React.useCallback(\n    (index: number) => {\n      if (!randomize) {\n        return index * (360 / count);\n      }\n      const hash = (index * 1337) % 360;\n      return hash;\n    },\n    [count, randomize],\n  );\n\n  const getBeamStyle = (index: number) => {\n    const angle = getPosition(index);\n    const delay = settings.delay * index;\n    const patternStyle = patternStyles[pattern];\n    const animations = [\n      `${patternStyle.animation} ${settings.speed}s cubic-bezier(0.4, 0.26, 0, 0.97) ${delay}s infinite ${\n        reverse ? \"reverse\" : \"\"\n      }`,\n    ];\n\n    if (pulse) {\n      animations.push(\n        `beam-pulse ${settings.speed * 1.5}s ease-in-out ${delay}s infinite`,\n      );\n    }\n    if (shimmer) {\n      animations.push(\n        `beam-shimmer ${settings.speed}s linear ${delay}s infinite`,\n      );\n    }\n\n    return {\n      \"--beam-angle\": `${angle}deg`,\n      \"--offset\": \"0px\",\n      \"--wave-offset\": \"0px\",\n      \"--pulse-scale\": \"1\",\n      \"--zigzag-offset\": \"0px\",\n      transform: patternStyle.transform,\n      animation: animations.join(\", \"),\n      filter: `blur(${blurAmount || 6}px)`,\n    } as React.CSSProperties;\n  };\n\n  return (\n    <div\n      className=\"absolute inset-0 dark:opacity-80\"\n      style={{\n        animation: rotateSpeed\n          ? `spin ${rotateSpeed}s linear infinite${reverse ? \" reverse\" : \"\"}`\n          : undefined,\n      }}\n    >\n      {Array.from({ length: count }).map((_, i) => (\n        <div\n          key={i}\n          className=\"absolute left-1/2 top-1/2 h-full origin-bottom\"\n          style={{ transform: `translateX(-50%) rotate(${getPosition(i)}deg)` }}\n        >\n          <div\n            className=\"absolute left-0 top-0 h-full w-[1px] overflow-hidden\"\n            style={{\n              backgroundColor: `rgba(${colors.base}, ${settings.opacity})`,\n            }}\n          >\n            <div\n              className=\"absolute left-0 top-[-50%] h-[15vh] w-full\"\n              style={{\n                background: `linear-gradient(to bottom, rgba(${colors.glow}, 0) 0%, rgba(${colors.glow}, 1) 75%, rgba(${colors.glow}, 1) 100%)`,\n                ...getBeamStyle(i),\n              }}\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default function BeamPortal({\n  className,\n  colorScheme = \"aurora\",\n  pattern = \"radial\",\n  intensity = \"active\",\n  reverse = false,\n  shimmer = false,\n  pulse = false,\n  randomize = false,\n  blurAmount = 6,\n  children,\n  ...props\n}: BeamPortalProps) {\n  const colors = colorSchemes[colorScheme];\n  const settings = intensitySettings[intensity];\n\n  return (\n    <div\n      className={cn(\n        \"group relative min-h-[300px] overflow-hidden rounded-xl bg-zinc-100 dark:bg-zinc-950\",\n        className,\n      )}\n      {...props}\n    >\n      <BeamRing\n        colors={{ base: colors.primary, glow: colors.primary }}\n        count={12}\n        radius=\"100%\"\n        settings={settings}\n        pattern={pattern}\n        reverse={reverse}\n        shimmer={shimmer}\n        pulse={pulse}\n        randomize={randomize}\n        blurAmount={blurAmount}\n        rotateSpeed={20}\n      />\n      <div className=\"absolute inset-[15%]\">\n        <BeamRing\n          colors={{ base: colors.secondary, glow: colors.secondary }}\n          count={8}\n          radius=\"85%\"\n          settings={{\n            ...settings,\n            speed: settings.speed * 0.8,\n          }}\n          pattern={pattern}\n          reverse={!reverse}\n          shimmer={shimmer}\n          pulse={pulse}\n          randomize={randomize}\n          blurAmount={blurAmount}\n          rotateSpeed={15}\n        />\n      </div>\n\n      <div className=\"absolute inset-[30%]\">\n        <BeamRing\n          colors={{ base: colors.tertiary, glow: colors.tertiary }}\n          count={6}\n          radius=\"70%\"\n          settings={{\n            ...settings,\n            speed: settings.speed * 0.6,\n          }}\n          pattern={pattern}\n          reverse={reverse}\n          shimmer={shimmer}\n          pulse={pulse}\n          randomize={randomize}\n          blurAmount={blurAmount}\n          rotateSpeed={10}\n        />\n      </div>\n\n      <div\n        className=\"absolute inset-0\"\n        style={{\n          background: `radial-gradient(circle at 50% 50%, \n            rgba(${colors.tertiary}, 0.1) 0%, \n            rgba(${colors.secondary}, 0.05) 45%, \n            rgba(${colors.primary}, 0.02) 70%, \n            transparent 100%\n          )`,\n        }}\n      />\n\n      <div className=\"relative z-10 flex h-full min-h-[300px] items-center justify-center p-8\">\n        <div className=\"rounded-lg bg-white/50 p-6 backdrop-blur-sm dark:bg-black/50\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}