{
  "name": "cosmic-scene",
  "type": "registry:ui",
  "dependencies": [],
  "files": [
    {
      "path": "ui/cosmic-scene.tsx",
      "content": "import React, { useEffect, useRef, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface CosmicSceneProps extends React.HTMLAttributes<HTMLDivElement> {\n  size?: string;\n  colorScheme?: \"default\" | \"neon\" | \"sunset\" | \"ocean\";\n  interactive?: boolean;\n  children?: React.ReactNode;\n  overlayOpacity?: number;\n}\n\nexport default function CosmicScene({\n  className,\n  size = \"20px\",\n  colorScheme = \"default\",\n  interactive = true,\n  children,\n  overlayOpacity = 0,\n  ...props\n}: CosmicSceneProps) {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const colorSchemes = {\n    default:\n      \"from 180deg at 50% 70%, hsla(0,0%,98%,1) 0deg, #eec32d 72deg, #ec4b4b 144deg, #709ab9 216deg, #4dffbf 288deg, hsla(0,0%,98%,1) 1turn\",\n    neon: \"from 180deg at 50% 70%, #ff00ff 0deg, #00ffff 120deg, #ffff00 240deg, #ff00ff 360deg\",\n    sunset:\n      \"from 180deg at 50% 70%, #ff7b00 0deg, #ff0055 120deg, #8900ff 240deg, #ff7b00 360deg\",\n    ocean:\n      \"from 180deg at 50% 70%, #00fff2 0deg, #0066ff 120deg, #002bff 240deg, #00fff2 360deg\",\n  };\n\n  useEffect(() => {\n    if (!interactive || !containerRef.current) return;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const rect = containerRef.current?.getBoundingClientRect();\n      if (!rect) return;\n\n      const x = ((e.clientX - rect.left) / rect.width) * 100;\n      const y = ((e.clientY - rect.top) / rect.height) * 100;\n      setMousePosition({ x, y });\n    };\n\n    const container = containerRef.current;\n    container.addEventListener(\"mousemove\", handleMouseMove);\n    return () => container.removeEventListener(\"mousemove\", handleMouseMove);\n  }, [interactive]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"relative h-full min-h-[400px] w-full overflow-hidden bg-[hsl(0_0%_6%)]\",\n        className,\n      )}\n      {...props}\n    >\n      <div\n        className=\"absolute inset-0 h-full w-full animate-flicker transition-transform duration-300 ease-out\"\n        style={{\n          background: `conic-gradient(${colorSchemes[colorScheme]})`,\n          transform: interactive\n            ? `perspective(1000px) rotateX(${\n                (mousePosition.y - 50) * 0.02\n              }deg) rotateY(${(mousePosition.x - 50) * 0.02}deg)`\n            : undefined,\n          WebkitMaskImage: `radial-gradient(circle at ${\n            interactive ? `${mousePosition.x}% ${mousePosition.y}%` : \"50% 50%\"\n          }, white 2px, transparent 2.5px), url(\"https://assets.codepen.io/605876/noise-mask.png\")`,\n          WebkitMaskSize: `${size} ${size}, 256px 256px`,\n          WebkitMaskPosition: \"50% 50%, 4px 50%\",\n          WebkitMaskComposite: \"intersect\",\n          maskImage: `radial-gradient(circle at ${\n            interactive ? `${mousePosition.x}% ${mousePosition.y}%` : \"50% 50%\"\n          }, white 2px, transparent 2.5px), url(\"https://assets.codepen.io/605876/noise-mask.png\")`,\n          maskSize: `${size} ${size}, 256px 256px`,\n          maskPosition: \"50% 50%, 4px 50%\",\n          maskComposite: \"intersect\",\n        }}\n      />\n      {overlayOpacity > 0 && (\n        <div\n          className=\"absolute inset-0 bg-black transition-opacity duration-300\"\n          style={{ opacity: overlayOpacity }}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}