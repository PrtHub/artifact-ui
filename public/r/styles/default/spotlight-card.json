{
  "name": "spotlight-card",
  "type": "registry:ui",
  "dependencies": [
    "@/lib/utils"
  ],
  "files": [
    {
      "path": "ui/spotlight-card.tsx",
      "content": "import React, { useRef, useState, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface SpotlightCardProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  spotlightSize?: number;\n  spotlightOpacity?: number;\n  gradientColor?: string;\n  glowEffect?: boolean;\n  multiSpotlight?: boolean;\n  spotlightBlur?: boolean;\n  glowSize?: number;\n  glowOpacity?: number;\n  animated?: boolean;\n}\n\nexport default function SpotlightCard({\n  children,\n  className,\n  spotlightSize = 250,\n  spotlightOpacity = 0.15,\n  gradientColor = \"rgb(168, 85, 247)\",\n  glowEffect = false,\n  multiSpotlight = false,\n  spotlightBlur = false,\n  glowSize = 100,\n  glowOpacity = 0.15,\n  animated = false,\n  ...props\n}: SpotlightCardProps) {\n  const divRef = useRef<HTMLDivElement>(null);\n  const [position, setPosition] = useState<{ x: number; y: number }>({\n    x: 0,\n    y: 0,\n  });\n  const [secondaryPosition, setSecondaryPosition] = useState<{\n    x: number;\n    y: number;\n  }>({\n    x: 0,\n    y: 0,\n  });\n  const [opacity, setOpacity] = useState(0);\n  const [isHovered, setIsHovered] = useState(false);\n\n  useEffect(() => {\n    if (animated && isHovered) {\n      const interval = setInterval(() => {\n        setSecondaryPosition({\n          x: Math.random() * (divRef.current?.offsetWidth || 0),\n          y: Math.random() * (divRef.current?.offsetHeight || 0),\n        });\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [animated, isHovered]);\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!divRef.current) return;\n\n    const div = divRef.current;\n    const rect = div.getBoundingClientRect();\n\n    const newPosition = {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top,\n    };\n\n    setPosition(newPosition);\n\n    if (multiSpotlight) {\n      setSecondaryPosition({\n        x: div.offsetWidth - (e.clientX - rect.left),\n        y: div.offsetHeight - (e.clientY - rect.top),\n      });\n    }\n  };\n\n  const handleMouseEnter = () => {\n    setOpacity(1);\n    setIsHovered(true);\n  };\n\n  const handleMouseLeave = () => {\n    setOpacity(0);\n    setIsHovered(false);\n  };\n\n  const getSpotlightBackground = (\n    pos: { x: number; y: number },\n    size: number,\n    blur = false,\n  ) => {\n    return `radial-gradient(${size}px ${blur ? \"ellipse\" : \"circle\"} at ${pos.x}px ${pos.y}px, \n      var(--spotlight-color) 0%, \n      transparent ${blur ? \"75%\" : \"65%\"})`;\n  };\n\n  return (\n    <div\n      ref={divRef}\n      className={cn(\n        \"relative overflow-hidden rounded-xl border bg-background transition-transform duration-300\",\n        isHovered && \"scale-[1.02]\",\n        className,\n      )}\n      onMouseMove={handleMouseMove}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      {/* Main Spotlight */}\n      <div\n        className=\"pointer-events-none absolute -inset-px opacity-0 transition-opacity duration-300\"\n        style={\n          {\n            opacity,\n            background: getSpotlightBackground(\n              position,\n              spotlightSize,\n              spotlightBlur,\n            ),\n            [\"--spotlight-color\" as string]: `color-mix(in srgb, var(--gradient-color, ${gradientColor}), transparent ${(1 - spotlightOpacity) * 100}%)`,\n          } as React.CSSProperties\n        }\n      />\n\n      {/* Secondary Spotlight */}\n      {multiSpotlight && (\n        <div\n          className=\"pointer-events-none absolute -inset-px opacity-0 transition-opacity duration-300\"\n          style={\n            {\n              opacity: opacity * 0.7,\n              background: getSpotlightBackground(\n                secondaryPosition,\n                spotlightSize * 0.8,\n                spotlightBlur,\n              ),\n              [\"--spotlight-color\" as string]: `color-mix(in srgb, var(--gradient-color, ${gradientColor}), transparent ${(1 - spotlightOpacity * 0.8) * 100}%)`,\n            } as React.CSSProperties\n          }\n        />\n      )}\n\n      {/* Glow Effect */}\n      {glowEffect && (\n        <div\n          className=\"pointer-events-none absolute -inset-px opacity-0 blur-xl transition-opacity duration-300\"\n          style={\n            {\n              opacity: opacity * glowOpacity,\n              background: getSpotlightBackground(position, glowSize),\n              [\"--spotlight-color\" as string]: `color-mix(in srgb, var(--gradient-color, ${gradientColor}), transparent 15%)`,\n            } as React.CSSProperties\n          }\n        />\n      )}\n\n      {/* Light Mode Gradient */}\n      <div\n        className=\"absolute -inset-px transition-opacity duration-300 dark:opacity-0\"\n        style={{\n          background:\n            \"linear-gradient(to right, transparent, rgb(255 255 255 / 0.1))\",\n        }}\n      />\n\n      {/* Dark Mode Gradient */}\n      <div\n        className=\"absolute -inset-px opacity-0 mix-blend-overlay transition-opacity duration-300 dark:opacity-100\"\n        style={{\n          background:\n            \"linear-gradient(to right, transparent, rgb(0 0 0 / 0.05))\",\n        }}\n      />\n\n      <div className=\"relative\">{children}</div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}