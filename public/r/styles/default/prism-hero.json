{
  "name": "prism-hero",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui/prism-hero.tsx",
      "content": "import React, { useEffect, useRef } from \"react\";\nimport {\n  HTMLMotionProps,\n  motion,\n  useAnimation,\n  useInView,\n  type Variants,\n} from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ntype MotionDivProps = HTMLMotionProps<\"div\">;\n\nexport interface PrismHeroProps extends MotionDivProps {\n  texts?: string[];\n  animationStyle?:\n    | \"typing\"\n    | \"fade\"\n    | \"slide\"\n    | \"morph\"\n    | \"bounce\"\n    | \"flip\"\n    | \"zoom\"\n    | \"rotate\"\n    | \"elastic\"\n    | \"wave\";\n  typingSpeed?: number;\n  backgroundColor?: string;\n  backgroundColors?: [string, string, string, string];\n  overlayColor?: string;\n  textGradient?: {\n    from: string;\n    to: string;\n  };\n  className?: string;\n}\n\nconst textVariants: Record<string, Variants> = {\n  typing: {\n    initial: { width: \"0%\" },\n    animate: { width: \"100%\" },\n    exit: { width: \"0%\" },\n  },\n  fade: {\n    initial: { opacity: 0, y: 20 },\n    animate: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: -20 },\n  },\n  slide: {\n    initial: { x: 50, opacity: 0 },\n    animate: { x: 0, opacity: 1 },\n    exit: { x: -50, opacity: 0 },\n  },\n  morph: {\n    initial: { filter: \"blur(10px)\", opacity: 0, scale: 1.2 },\n    animate: { filter: \"blur(0px)\", opacity: 1, scale: 1 },\n    exit: { filter: \"blur(10px)\", opacity: 0, scale: 0.8 },\n  },\n  bounce: {\n    initial: { y: -100, opacity: 0 },\n    animate: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 300,\n        damping: 15,\n      },\n    },\n    exit: {\n      y: 100,\n      opacity: 0,\n      transition: { duration: 0.3 },\n    },\n  },\n  flip: {\n    initial: {\n      rotateX: 90,\n      opacity: 0,\n      scale: 0.8,\n    },\n    animate: {\n      rotateX: 0,\n      opacity: 1,\n      scale: 1,\n      transition: {\n        type: \"spring\",\n        damping: 20,\n        stiffness: 200,\n      },\n    },\n    exit: {\n      rotateX: -90,\n      opacity: 0,\n      scale: 0.8,\n      transition: { duration: 0.3 },\n    },\n  },\n  zoom: {\n    initial: {\n      scale: 2,\n      opacity: 0,\n      filter: \"blur(4px)\",\n    },\n    animate: {\n      scale: 1,\n      opacity: 1,\n      filter: \"blur(0px)\",\n      transition: {\n        type: \"spring\",\n        damping: 25,\n      },\n    },\n    exit: {\n      scale: 0,\n      opacity: 0,\n      filter: \"blur(4px)\",\n      transition: { duration: 0.3 },\n    },\n  },\n  rotate: {\n    initial: {\n      rotate: 180,\n      scale: 0,\n      opacity: 0,\n    },\n    animate: {\n      rotate: 0,\n      scale: 1,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        damping: 15,\n        stiffness: 150,\n      },\n    },\n    exit: {\n      rotate: -180,\n      scale: 0,\n      opacity: 0,\n      transition: { duration: 0.3 },\n    },\n  },\n  elastic: {\n    initial: {\n      scaleX: 0,\n      opacity: 0,\n    },\n    animate: {\n      scaleX: 1,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 300,\n        damping: 20,\n      },\n    },\n    exit: {\n      scaleX: 0,\n      opacity: 0,\n      transition: { duration: 0.3 },\n    },\n  },\n  wave: {\n    initial: {\n      y: 20,\n      opacity: 0,\n      skewX: -15,\n    },\n    animate: {\n      y: 0,\n      opacity: 1,\n      skewX: 0,\n      transition: {\n        type: \"spring\",\n        stiffness: 150,\n        damping: 15,\n      },\n    },\n    exit: {\n      y: -20,\n      opacity: 0,\n      skewX: 15,\n      transition: { duration: 0.3 },\n    },\n  },\n};\n\nconst backgroundVariants: Variants = {\n  initial: { opacity: 0 },\n  animate: { opacity: 1 },\n};\n\nexport default function PrismHero({\n  texts = [\"Welcome\", \"to\", \"Xanthic UI\"],\n  animationStyle = \"fade\",\n  typingSpeed = 40,\n  backgroundColor = \"#1a1a1a\",\n  backgroundColors = [\n    \"rgba(26, 26, 26, 0.8)\",\n    \"rgba(42, 42, 42, 0.85)\",\n    \"rgba(58, 58, 58, 0.9)\",\n    \"rgba(74, 74, 74, 0.95)\",\n  ],\n  overlayColor = \"rgba(120,119,198,0.3)\",\n  textGradient = {\n    from: \"white\",\n    to: \"rgba(255, 255, 255, 0.8)\",\n  },\n  className,\n  ...props\n}: PrismHeroProps) {\n  const ref = useRef(null);\n  const isInView = useInView(ref);\n  const [currentTextIndex, setCurrentTextIndex] = React.useState(0);\n  const [scrollProgress, setScrollProgress] = React.useState(0);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollY = window.scrollY;\n      const windowHeight = window.innerHeight;\n      const progress = Math.min(scrollY / windowHeight, 1);\n      setScrollProgress(progress);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTextIndex((prev) => (prev + 1) % texts.length);\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, [texts.length]);\n\n  const interpolateColor = () => {\n    const index = Math.floor(scrollProgress * (backgroundColors.length - 1));\n    return backgroundColors[index];\n  };\n\n  return (\n    <motion.div\n      ref={ref}\n      variants={backgroundVariants}\n      initial=\"initial\"\n      animate=\"animate\"\n      className={cn(\n        \"relative flex min-h-screen items-center justify-center overflow-hidden rounded\",\n        className,\n      )}\n      style={{\n        backgroundColor: interpolateColor(),\n        backgroundImage:\n          \"radial-gradient(circle at 50% 50%, rgba(255, 255, 255, 0.05) 0%, transparent 100%)\",\n      }}\n      {...props}\n    >\n      <div\n        className=\"absolute inset-0\"\n        style={{\n          background: `radial-gradient(circle at 50% 120%, ${overlayColor}, transparent 80%)`,\n        }}\n      />\n      <div className=\"perspective-1000 relative flex items-center justify-center\">\n        <motion.div\n          key={currentTextIndex}\n          initial=\"initial\"\n          animate=\"animate\"\n          exit=\"exit\"\n          variants={textVariants[animationStyle]}\n          transition={{ duration: 0.5, ease: \"easeInOut\" }}\n          className={cn(\n            \"relative z-10 overflow-hidden whitespace-nowrap text-4xl font-bold tracking-tight text-white md:text-6xl lg:text-7xl\",\n            animationStyle === \"typing\" && \"mx-auto\",\n          )}\n        >\n          <span\n            className={cn(\n              \"bg-clip-text text-transparent\",\n              animationStyle === \"typing\" && \"block text-center\",\n            )}\n            style={{\n              ...{\n                backgroundImage: `linear-gradient(to right, ${textGradient.from}, ${textGradient.to})`,\n              },\n              ...(animationStyle === \"typing\"\n                ? {\n                    width: \"fit-content\",\n                    margin: \"0 auto\",\n                    position: \"relative\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                  }\n                : {}),\n            }}\n          >\n            {texts[currentTextIndex]}\n          </span>\n        </motion.div>\n      </div>\n    </motion.div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}