{
  "name": "grid-pattern-background",
  "type": "registry:ui",
  "dependencies": [],
  "files": [
    {
      "path": "ui/grid-pattern-background.tsx",
      "content": "import React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface GridPatternBackgroundProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  gridType?: \"dots\" | \"lines\" | \"squares\" | \"crosshatch\" | \"diamonds\";\n  gridSize?: number;\n  opacity?: number;\n  color?: string;\n  animate?: boolean;\n  className?: string;\n}\n\nexport default function GridPatternBackground({\n  gridType = \"dots\",\n  gridSize = 20,\n  opacity = 0.2,\n  color = \"currentColor\",\n  animate = false,\n  className,\n  ...props\n}: GridPatternBackgroundProps) {\n  const patternId = React.useId();\n\n  return (\n    <div\n      className={cn(\"relative h-full w-full overflow-hidden\", className)}\n      {...props}\n    >\n      <svg className=\"absolute inset-0 h-full w-full\">\n        <defs>\n          <pattern\n            id={patternId}\n            patternUnits=\"userSpaceOnUse\"\n            width={gridSize}\n            height={gridSize}\n            className={cn(\n              animate && [\n                gridType === \"dots\"\n                  ? \"animate-[dots-shift_20s_linear_infinite]\"\n                  : gridType === \"lines\"\n                    ? \"animate-[lines-shift_20s_linear_infinite]\"\n                    : gridType === \"squares\"\n                      ? \"animate-[squares-shift_20s_linear_infinite]\"\n                      : gridType === \"crosshatch\"\n                        ? \"animate-[crosshatch-shift_20s_linear_infinite]\"\n                        : \"animate-[diamonds-shift_20s_linear_infinite]\",\n                \"origin-center\",\n              ],\n            )}\n          >\n            {gridType === \"dots\" ? (\n              <circle\n                cx={gridSize / 2}\n                cy={gridSize / 2}\n                r={1}\n                fill={color}\n                style={{ opacity }}\n              />\n            ) : gridType === \"lines\" ? (\n              <path\n                d={`M ${gridSize} 0 L 0 0 L 0 ${gridSize}`}\n                fill=\"none\"\n                stroke={color}\n                strokeWidth=\"0.5\"\n                style={{ opacity }}\n              />\n            ) : gridType === \"squares\" ? (\n              <rect\n                x={gridSize / 4}\n                y={gridSize / 4}\n                width={gridSize / 2}\n                height={gridSize / 2}\n                fill={color}\n                style={{ opacity }}\n              />\n            ) : gridType === \"crosshatch\" ? (\n              <>\n                <path\n                  d={`M ${gridSize} 0 L 0 ${gridSize}`}\n                  fill=\"none\"\n                  stroke={color}\n                  strokeWidth=\"0.5\"\n                  style={{ opacity }}\n                />\n                <path\n                  d={`M 0 0 L ${gridSize} ${gridSize}`}\n                  fill=\"none\"\n                  stroke={color}\n                  strokeWidth=\"0.5\"\n                  style={{ opacity }}\n                />\n              </>\n            ) : (\n              // diamonds\n              <path\n                d={`M ${gridSize / 2} ${gridSize / 4} L ${(gridSize * 3) / 4} ${gridSize / 2} L ${gridSize / 2} ${(gridSize * 3) / 4} L ${gridSize / 4} ${gridSize / 2} Z`}\n                fill={color}\n                style={{ opacity }}\n              />\n            )}\n          </pattern>\n        </defs>\n        <rect\n          width=\"100%\"\n          height=\"100%\"\n          fill={`url(#${patternId})`}\n          style={{\n            transformBox: \"fill-box\",\n            transformOrigin: \"center\",\n          }}\n        />\n      </svg>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}